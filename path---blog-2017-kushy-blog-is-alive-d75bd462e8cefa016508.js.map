{"version":3,"sources":["webpack:///path---blog-2017-kushy-blog-is-alive-d75bd462e8cefa016508.js","webpack:///./.cache/json/blog-2017-kushy-blog-is-alive.json"],"names":["webpackJsonp","391","module","exports","data","blog","html","frontmatter","title","cover_image","date","tags","section","author","fields","slug","relatedPosts","edges","node","publicURL","childImageSharp","sizes","src","srcSet","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,y8IAA4zBC,aAAmqHC,MAAA,uBAAAC,YAAA,KAAAC,KAAA,oBAAAC,MAAA,sCAAAC,QAAA,OAAAC,OAAA,OAA2JC,QAAWC,KAAA,oCAA0CC,cAAiBC,QAAUC,MAAQZ,KAAA,qmNAA0mLC,aAAgsCC,MAAA,sBAAAC,aAA6CU,UAAA,mEAAAC,iBAAkGC,OAASC,IAAA,yEAAAC,OAAA,4YAAmeb,KAAA,gBAAAC,MAAA,uCAAsEG,QAAWC,KAAA,kDAAyDG,MAAQZ,KAAA,q7RAAAC,aAAk/RC,MAAA,8BAAAC,YAAA,KAAAC,KAAA,gBAAAC,MAAA,qCAA4HG,QAAWC,KAAA,gDAAsDS,aAAgBC,IAAA,gBAAAV,KAAA","file":"path---blog-2017-kushy-blog-is-alive-d75bd462e8cefa016508.js","sourcesContent":["webpackJsonp([248487619692878],{\n\n/***/ 391:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>After much deliberation over picking a cloud-based service like Medium or Tumblr, or even a Git-powered JAM-stack with <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a> or <a href=\\\"gatsbyjs.org\\\">GatsbyJS</a>, we finally settled on a blog framework for Kushy: <a href=\\\"https://getkirby.com/\\\">KirbyCMS</a>. </p>\\n<p>Don't get me wrong. We'll still post on <a href=\\\"https://medium.com/kushyapp\\\">Medium</a> and <a href=\\\"https://kushyapp.tumblr.com/\\\">Tumblr</a>. But we'll do the thing that brands like <em>Google Design</em> does, and cross-post our content for maximum visibility.</p>\\n<h2>Kirby the Pink Guy?</h2>\\n<div style='position:relative;padding-bottom:54%'><iframe src='https://gfycat.com/ifr/OblongBruisedKronosaurus' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0' allowfullscreen></iframe></div>\\n<p>Not <em>that</em> Kirby. Kirby allows us to serve static content like a <a href=\\\"https://gohugo.io/\\\">Hugo</a>, but gives our writers the power of an admin panel to easily create content without activating <em>builds</em> or <em>deploys</em>. It's super fast, and very flexible. We can quickly create an API to serve content to our other apps. And when it comes time to migrate content, all of it is stored locally in a combination of YAML structuring (or <em>blueprints</em>) and Markdown. </p>\\n<h2>The Design</h2>\\n<p>I whipped this up in Sketch over a night. Something simple, yet exemplifying the fundamental elements of our brand guide. It was easily adapted to Kirby thanks to their MVC style app structure. I created a couple core templates and a number of <em>'snippets'</em> or components to include around the site (header, footer, navigation, etc).</p>\\n<h2>The Structure</h2>\\n<p>The goal of the blog was to have a home for Kushy's news and announcements, as well as a place for our development team to blog about their advancements. </p>\\n<p>Rather than creating two separate blogs, or even sorting things out with categories (which gets confusing for both teams), we took advantage of Kirby's custom post types. Similar to Wordpress and <a href=\\\"https://www.advancedcustomfields.com\\\">Advanced Custom Fields</a>, you can create new types of posts with different meta data. So we'd have a blog post type, and a dev post type -- each with differing fields, like their own set of categories.</p>\\n<p>This allowed us to separate the content physically in different folders, as opposed to mixing posts in one giant blog folder. And it allowed users in the backend to easily find and author posts in either side of the site. Dev's have their blog, everyone else has theirs. Peace is hashed out in the blogroll.</p>\\n<h3>The Team</h3>\\n<p>Any of the cool cats working on Kushy are free to have an account on the blog. After an admin creates the initial user account, the user can login and fill out their author bio with their social media links. These are easily integrated with Kirby's blueprint system, allowing us to pull this data up on any post:</p>\\n<p>(gist: <a href=\\\"https://gist.github.com/kushyapp/1b0ff056a8f1e6f630740c83424f8219\\\">https://gist.github.com/kushyapp/1b0ff056a8f1e6f630740c83424f8219</a>)</p>\\n<h2>The Future</h2>\\n<p>You never know. We could toss out this structure tomorrow in favor of a JAM stack. Ideally however, this is the best option for Kushy in terms of it's current growth trajectory. The blog is setup to horizontally scale on it's own separate distribution for a while.</p>\\n<p>But <strong>things happen</strong> and if we explode (<em>in terms of traffic</em>), we'll need to integrate things like a CDN to store our images or a database to query for searches (ironic how static swings back to a database eventually at scale). And Kirby's admin panel is great, but it lacks some minor touches that would refine the UX (like autosaving posts occasionally so I don't get logged out and lose all my writing).</p>\\n<p>We're also looking to integrate the Kushy API. Widgets for displaying strain profiles, or shop listings, or even an embeddable menu. We'd like to make the connection between the blog and Kushy as seamless as possible thanks to the power of the API.</p>\\n<p>Lots of cool stuff to look forward to!</p>\\n<p>Oscar</p>\\n<hr>\\n<p><strong>Further Reading:</strong></p>\\n<ul>\\n<li><a href=\\\"http://getkirby.com\\\">KirbyCMS</a></li>\\n<li><a href=\\\"http://api.kushy.net\\\">Kushy API</a></li>\\n<li><a href=\\\"https://medium.com/kushyapp\\\">Kushy Medium</a></li>\\n<li><a href=\\\"https://kushyapp.tumblr.com/\\\">Kushy Tumblr</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy Blog is Alive!\",\"cover_image\":null,\"date\":\"06 December, 2017\",\"tags\":[\"blog\",\"kirby\",\"cms\",\"announcements\"],\"section\":\"blog\",\"author\":\"Ryo\"},\"fields\":{\"slug\":\"/blog/2017/kushy-blog-is-alive/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Keeping track of legal cannabis is one hell of a job. That's why many states that legalize medicinal and recreational cannabis license a 3rd party seed to sale tracking solution to handle the sticky task. These solutions provide businesses a place to input their activity (plant growth, transfers, sales) so the state can monitor and ensure compliance with all regulations and restrictions. <a href=\\\"http://metrc.com\\\"><strong>METRC</strong></a> is one of these seed to sale tracking solutions currently licensed by 13 states. <a href=\\\"http://kushy.net\\\">Kushy</a> is certified with METRC to access their API, so that we can update seed to sale information on behalf of businesses. </p>\\n<p>In order to make accessing the API easier for our developer, we put together an SDK for PHP programmers looking to quickly query METRC API endpoints. Our goal was to create a simple to use interface for the METRC API, without requiring the user manually input endpoints and whatnot. The result is a simple to use API for an API:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>The Construction</h2>\\n<p>The SDK is a simple class that uses the Guzzle library to create HTTP requests on behalf of the user. Each endpoint 'route' is a separate class that extends the base Guzzle class.</p>\\n<h2>How to use it</h2>\\n<ol>\\n<li>Install the METRC package with Composer: <code class=\\\"language-text\\\">composer require &#39;kushy/metrc-php-sdk&#39;</code></li>\\n<li>Require whichever route class you need in your application - in this case we want to access the <code class=\\\"language-text\\\">/harvests/</code> endpoint (<em>assuming you're using PSR-4</em>):</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Create a new instance of the route class (<code class=\\\"language-text\\\">Harvests</code>) and pass through your state's abbreviated name (in this case <code class=\\\"language-text\\\">ca</code> for California) and Vendor + User API keys:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Use one of the class methods to query the API - this example grabs the active harvests:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>You can find the package on <a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">Packagist here</a>, as well as a README with more details (instructions, tips and tricks, etc).</p>\\n</blockquote>\\n<h2>Making cannabis (development) simpler</h2>\\n<p>Here at Kushy we're always innovating and contributing back to the cannabis community to ensure that life gets easier for everyone in the cannabis chain of command -- from consumers to businesses to developers. If we can make it easier to integrate with METRC, it increases the potential for more excellent apps that keep businesses compliant and safe from losing their license.</p>\\n<p>If you're interested in contributing and improving the SDK, <a href=\\\"https://github.com/kushyapp/kushy-metrc-php-sdk\\\">fork us over on Github and send a PR our way!</a></p>\\n<p>Stay kushy,\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">kushy/metrc-php-sdk</a></li>\\n<li><a href=\\\"http://metrc.com\\\">METRC</a></li>\\n<li><a href=\\\"https://api-ca.metrc.com/Documentation/\\\">METRC API Docs for California</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy METRC PHP SDK\",\"cover_image\":{\"publicURL\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg\",\"srcSet\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-7cc04.jpg 310w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-69042.jpg 620w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg 1240w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-50ab1.jpg 1860w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-de007.jpg 2000w\"}}},\"date\":\"19 July, 2018\",\"tags\":[\"tools\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}}},{\"node\":{\"html\":\"<p>Kushy was founded with a mission to provide a scalable API for the cannabis industry. So far, our API has been only read-only, with only a few endpoints for our major content areas (shops, products, etc). We haven't actually needed to use the API in any applications, beyond minor showcases of it's GET potential.</p>\\n<p>Now that's all going to change.</p>\\n<p>Over the past few months we've gotten a few feature requests from developers looking to implement the Kushy API into their cannabis apps. And I'm excited to announce that we've met the demand by updating our API from an alpha release to a v1 beta.</p>\\n<p>But enough conceptualizing, let's talk process and progress.</p>\\n<blockquote>\\n<p>Our alpha endpoints were originally labeled 'v3', since it was technically the 3rd version of our alpha. However this was confusing, so we dropped it in favor of v1 to make it simpler for earlier adopters.</p>\\n</blockquote>\\n<p>In a fairly short time, we've been able to isolate our API from our frontend stack, and create microservices and separate applications for our different needs. All of our interfaces now operate independently and interact with the same API, keeping a single source of truth between our suite of apps.</p>\\n<h2>Built from the ground up</h2>\\n<p>Rather than building the API purely abstractly through some OpenAPI/Swagger docs, we opted to take a more practical approach to the API development. Using the our own API to build applications for internal and client-side use, we've been able to pinpoint any issues that developers may encounter while integrating.</p>\\n<p>Though we did seek a more practical route, it does not mean we didn't plan our approach. The first step was planning out the entire API. Every endpoint had to be listed to ensure we had a place to query every type of data. Relationships were the trickiest part, it was tempting to create relational endpoints on each parent endpoint (e.g. <code class=\\\"language-text\\\">/api/v1/shops/photos/</code>). However by listing these out, it became clear root endpoints for the relationships would be more efficient (e.g. <code class=\\\"language-text\\\">/api/v1/photos/menu/:shopSlug/</code>), rather than duplicating it on a bunch of controllers.</p>\\n<h3>App first approach</h3>\\n<p>We used our NextJS frontend and an admin backend as platforms to build out all the missing endpoints and methods (POST, PUT, DELETE). For the most part, It was a fairly simple endeavor of taking our existing functions and migrating them to API controllers. </p>\\n<p>We were able to format our JSON responses Laravel's <a href=\\\"https://laravel.com/docs/5.6/eloquent-resources\\\">API Resources</a>, which allow fine-tuned control of what object properties display (beyond the Model's hidden or protected properties, and any scoped properties). It added the last layer of polish to the API ensuring that our responses weren't inherently tied to our Models/table columns, allowing for more flexibility down the line if we needed to modify any Models (and possibly rename important columns like \\\"featured_img\\\").</p>\\n<h3>Develop 👉 Documentation</h3>\\n<p>Each round of API development was immediately followed with documentation. To facilitate this, I created a GatsbyJS project based on <a href=\\\"https://github.com/lord/slate\\\">Slate</a> that takes a folder full of Markdown files and generates fast and accessible docs. To add endpoints to the API, you simply create a new folder (if one doesn't exist for the endpoint/section), and add a Markdown file with the following headers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\ntitle<span class=\\\"token punctuation\\\">:</span> Get inventory <span class=\\\"token keyword\\\">of</span> specific shop<span class=\\\"token operator\\\">/</span>brand\\nroute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/inventory/menu/:slug\\\"</span>\\nmethod<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"get\\\"</span>\\npage_type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"api\\\"</span>\\nlast_updated<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2018-07-13\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n\\nCode snippets first\\n\\nThen your page info here\\n</code></pre>\\n      </div>\\n<p>Save your file, run the deploy script, and the docs are up to date! Gatsby displays all your docs organized in the sidebar and uses the method in the Markdown header to label each route/endpoint appropriately. Some neat CSS tricks take the code snippets and align them to the right of your text in a separate dark sidebar (on larger viewports).</p>\\n<p>This simplified workflow expedited the documentation process, allowing us to focus on writing (<em>and often just copy/pasting</em>).</p>\\n<h2>New features</h2>\\n<p>I mentioned we only had base endpoints with only the GET methods. Now the API has been expanded from 4 endpoints to over 20! Here are just a few of the endpoints we added:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">/inventory/</code> - Allows you to access the inventory system, whether it's all tracked products, or an individuals shop or brand's menu (<code class=\\\"language-text\\\">/inventory/menu/the-shop-slug-here</code>).</li>\\n<li><code class=\\\"language-text\\\">/photos/</code> - Displays all photos in database, usually attached to posts (like shops, products, etc).</li>\\n<li><code class=\\\"language-text\\\">/states/</code> - Shows a list of 50 states and popular cities for location-based archives.</li>\\n</ul>\\n<h2>So what are the benefits?</h2>\\n<p>As with any software development, mountains of code don't get moved without good reason. We chose to migrate our API to it's own separate home for a few good reasons.</p>\\n<h3>Scalability</h3>\\n<p>Having the API in it's own home makes tasks like clustering, or even splintering into microservices, much easier. Before it would have been impossible without excising the API completely (like we are now).</p>\\n<h3>Maintainability</h3>\\n<p>The more code, the more confusing. Especially when you're dealing with different realms (server and client side) and have different goals for each. Keeping our frontend and backend code separate ensures that primarily - if we break one, the other doesn't break. It's also easier to hand the codebase to a developer and have them grasp it, as opposed to deciphering the difference between the frontend and backend themselves.</p>\\n<h3>Efficiency</h3>\\n<p>By running it as a separate instance from the frontend, we can run the API on a whole different server than our frontend. That improves the load immensely already. And like I mentioned before, we can begin to optimize the API for load balancing.</p>\\n<h2>The future of Kushy apps</h2>\\n<p>Now that we've transitioned to an API-centric architecture, we can start to create applications that leverage it's power. The first app we whipped up was a frontend for Kushy, essentially mirroring the functionality we'd already created with Laravel. The main goal was to create a modern progressive web app, preferably running on ReactJS. </p>\\n<p>We settled on NextJS as a framework to solve a lot of the issues we had with frontend React development:</p>\\n<ul>\\n<li>Single page applications, or SPAs, are notorious for being less SEO friendly. NextJS enables server-side rendering of React, so pages can be hydrated with data before the user renders the page. This ensures important content is always loaded, even if Javascript is disabled client-side.</li>\\n<li>React stacks are known for being full of complex configurations with utilities like Webpack. NextJS comes with preset configs out of the box that handle tasks like code splitting routes.</li>\\n<li>It's easy to use! The most important thing about a framework is how frictionless the experience is, and NextJS rightfully advertises itself as a minimalistic solution.</li>\\n</ul>\\n<p>We'll probably be using NextJS with a few other applications in the future, like our wholesale marketplace, until we discover a more suitable replacement for SSR.</p>\\n<h2>How can I get started with the Kushy API?</h2>\\n<p>If these kind of updates sound intriguing and you want to check out what kind of work we're doing here, you can <a href=\\\"http://kushy.net/developers\\\">sign up and create API credentials here</a> and then follow our <a href=\\\"https://kushy.net/developers/getting-started\\\">getting started guide</a> to see how to authenticate your app using the OAuth 2.0 flow.</p>\\n<p>I can't wait to see the full potential of the Kushy API realized, and a widespread adoption of it. I hope we can standardize this process for the cannabis industry, and provide a proven solution for everyday processes like patient verification or inventory management.</p>\\n<p>Cheers,\\nOscar</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"http://kushy.net/developers/\\\">Kushy API</a></li>\\n<li><a href=\\\"http://kushy.net/developers/apps/\\\">Kushy API - Create API credentials</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Future of the Kushy API\",\"cover_image\":null,\"date\":\"19 July, 2018\",\"tags\":[\"api\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/the-future-of-the-kushy-api/\"}}}]}},\"pathContext\":{\"tag\":\"announcements\",\"slug\":\"/blog/2017/kushy-blog-is-alive/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2017-kushy-blog-is-alive-d75bd462e8cefa016508.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>After much deliberation over picking a cloud-based service like Medium or Tumblr, or even a Git-powered JAM-stack with <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a> or <a href=\\\"gatsbyjs.org\\\">GatsbyJS</a>, we finally settled on a blog framework for Kushy: <a href=\\\"https://getkirby.com/\\\">KirbyCMS</a>. </p>\\n<p>Don't get me wrong. We'll still post on <a href=\\\"https://medium.com/kushyapp\\\">Medium</a> and <a href=\\\"https://kushyapp.tumblr.com/\\\">Tumblr</a>. But we'll do the thing that brands like <em>Google Design</em> does, and cross-post our content for maximum visibility.</p>\\n<h2>Kirby the Pink Guy?</h2>\\n<div style='position:relative;padding-bottom:54%'><iframe src='https://gfycat.com/ifr/OblongBruisedKronosaurus' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0' allowfullscreen></iframe></div>\\n<p>Not <em>that</em> Kirby. Kirby allows us to serve static content like a <a href=\\\"https://gohugo.io/\\\">Hugo</a>, but gives our writers the power of an admin panel to easily create content without activating <em>builds</em> or <em>deploys</em>. It's super fast, and very flexible. We can quickly create an API to serve content to our other apps. And when it comes time to migrate content, all of it is stored locally in a combination of YAML structuring (or <em>blueprints</em>) and Markdown. </p>\\n<h2>The Design</h2>\\n<p>I whipped this up in Sketch over a night. Something simple, yet exemplifying the fundamental elements of our brand guide. It was easily adapted to Kirby thanks to their MVC style app structure. I created a couple core templates and a number of <em>'snippets'</em> or components to include around the site (header, footer, navigation, etc).</p>\\n<h2>The Structure</h2>\\n<p>The goal of the blog was to have a home for Kushy's news and announcements, as well as a place for our development team to blog about their advancements. </p>\\n<p>Rather than creating two separate blogs, or even sorting things out with categories (which gets confusing for both teams), we took advantage of Kirby's custom post types. Similar to Wordpress and <a href=\\\"https://www.advancedcustomfields.com\\\">Advanced Custom Fields</a>, you can create new types of posts with different meta data. So we'd have a blog post type, and a dev post type -- each with differing fields, like their own set of categories.</p>\\n<p>This allowed us to separate the content physically in different folders, as opposed to mixing posts in one giant blog folder. And it allowed users in the backend to easily find and author posts in either side of the site. Dev's have their blog, everyone else has theirs. Peace is hashed out in the blogroll.</p>\\n<h3>The Team</h3>\\n<p>Any of the cool cats working on Kushy are free to have an account on the blog. After an admin creates the initial user account, the user can login and fill out their author bio with their social media links. These are easily integrated with Kirby's blueprint system, allowing us to pull this data up on any post:</p>\\n<p>(gist: <a href=\\\"https://gist.github.com/kushyapp/1b0ff056a8f1e6f630740c83424f8219\\\">https://gist.github.com/kushyapp/1b0ff056a8f1e6f630740c83424f8219</a>)</p>\\n<h2>The Future</h2>\\n<p>You never know. We could toss out this structure tomorrow in favor of a JAM stack. Ideally however, this is the best option for Kushy in terms of it's current growth trajectory. The blog is setup to horizontally scale on it's own separate distribution for a while.</p>\\n<p>But <strong>things happen</strong> and if we explode (<em>in terms of traffic</em>), we'll need to integrate things like a CDN to store our images or a database to query for searches (ironic how static swings back to a database eventually at scale). And Kirby's admin panel is great, but it lacks some minor touches that would refine the UX (like autosaving posts occasionally so I don't get logged out and lose all my writing).</p>\\n<p>We're also looking to integrate the Kushy API. Widgets for displaying strain profiles, or shop listings, or even an embeddable menu. We'd like to make the connection between the blog and Kushy as seamless as possible thanks to the power of the API.</p>\\n<p>Lots of cool stuff to look forward to!</p>\\n<p>Oscar</p>\\n<hr>\\n<p><strong>Further Reading:</strong></p>\\n<ul>\\n<li><a href=\\\"http://getkirby.com\\\">KirbyCMS</a></li>\\n<li><a href=\\\"http://api.kushy.net\\\">Kushy API</a></li>\\n<li><a href=\\\"https://medium.com/kushyapp\\\">Kushy Medium</a></li>\\n<li><a href=\\\"https://kushyapp.tumblr.com/\\\">Kushy Tumblr</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy Blog is Alive!\",\"cover_image\":null,\"date\":\"06 December, 2017\",\"tags\":[\"blog\",\"kirby\",\"cms\",\"announcements\"],\"section\":\"blog\",\"author\":\"Ryo\"},\"fields\":{\"slug\":\"/blog/2017/kushy-blog-is-alive/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Keeping track of legal cannabis is one hell of a job. That's why many states that legalize medicinal and recreational cannabis license a 3rd party seed to sale tracking solution to handle the sticky task. These solutions provide businesses a place to input their activity (plant growth, transfers, sales) so the state can monitor and ensure compliance with all regulations and restrictions. <a href=\\\"http://metrc.com\\\"><strong>METRC</strong></a> is one of these seed to sale tracking solutions currently licensed by 13 states. <a href=\\\"http://kushy.net\\\">Kushy</a> is certified with METRC to access their API, so that we can update seed to sale information on behalf of businesses. </p>\\n<p>In order to make accessing the API easier for our developer, we put together an SDK for PHP programmers looking to quickly query METRC API endpoints. Our goal was to create a simple to use interface for the METRC API, without requiring the user manually input endpoints and whatnot. The result is a simple to use API for an API:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>The Construction</h2>\\n<p>The SDK is a simple class that uses the Guzzle library to create HTTP requests on behalf of the user. Each endpoint 'route' is a separate class that extends the base Guzzle class.</p>\\n<h2>How to use it</h2>\\n<ol>\\n<li>Install the METRC package with Composer: <code class=\\\"language-text\\\">composer require &#39;kushy/metrc-php-sdk&#39;</code></li>\\n<li>Require whichever route class you need in your application - in this case we want to access the <code class=\\\"language-text\\\">/harvests/</code> endpoint (<em>assuming you're using PSR-4</em>):</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Create a new instance of the route class (<code class=\\\"language-text\\\">Harvests</code>) and pass through your state's abbreviated name (in this case <code class=\\\"language-text\\\">ca</code> for California) and Vendor + User API keys:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Use one of the class methods to query the API - this example grabs the active harvests:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>You can find the package on <a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">Packagist here</a>, as well as a README with more details (instructions, tips and tricks, etc).</p>\\n</blockquote>\\n<h2>Making cannabis (development) simpler</h2>\\n<p>Here at Kushy we're always innovating and contributing back to the cannabis community to ensure that life gets easier for everyone in the cannabis chain of command -- from consumers to businesses to developers. If we can make it easier to integrate with METRC, it increases the potential for more excellent apps that keep businesses compliant and safe from losing their license.</p>\\n<p>If you're interested in contributing and improving the SDK, <a href=\\\"https://github.com/kushyapp/kushy-metrc-php-sdk\\\">fork us over on Github and send a PR our way!</a></p>\\n<p>Stay kushy,\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">kushy/metrc-php-sdk</a></li>\\n<li><a href=\\\"http://metrc.com\\\">METRC</a></li>\\n<li><a href=\\\"https://api-ca.metrc.com/Documentation/\\\">METRC API Docs for California</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy METRC PHP SDK\",\"cover_image\":{\"publicURL\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg\",\"srcSet\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-7cc04.jpg 310w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-69042.jpg 620w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg 1240w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-50ab1.jpg 1860w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-de007.jpg 2000w\"}}},\"date\":\"19 July, 2018\",\"tags\":[\"tools\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}}},{\"node\":{\"html\":\"<p>Kushy was founded with a mission to provide a scalable API for the cannabis industry. So far, our API has been only read-only, with only a few endpoints for our major content areas (shops, products, etc). We haven't actually needed to use the API in any applications, beyond minor showcases of it's GET potential.</p>\\n<p>Now that's all going to change.</p>\\n<p>Over the past few months we've gotten a few feature requests from developers looking to implement the Kushy API into their cannabis apps. And I'm excited to announce that we've met the demand by updating our API from an alpha release to a v1 beta.</p>\\n<p>But enough conceptualizing, let's talk process and progress.</p>\\n<blockquote>\\n<p>Our alpha endpoints were originally labeled 'v3', since it was technically the 3rd version of our alpha. However this was confusing, so we dropped it in favor of v1 to make it simpler for earlier adopters.</p>\\n</blockquote>\\n<p>In a fairly short time, we've been able to isolate our API from our frontend stack, and create microservices and separate applications for our different needs. All of our interfaces now operate independently and interact with the same API, keeping a single source of truth between our suite of apps.</p>\\n<h2>Built from the ground up</h2>\\n<p>Rather than building the API purely abstractly through some OpenAPI/Swagger docs, we opted to take a more practical approach to the API development. Using the our own API to build applications for internal and client-side use, we've been able to pinpoint any issues that developers may encounter while integrating.</p>\\n<p>Though we did seek a more practical route, it does not mean we didn't plan our approach. The first step was planning out the entire API. Every endpoint had to be listed to ensure we had a place to query every type of data. Relationships were the trickiest part, it was tempting to create relational endpoints on each parent endpoint (e.g. <code class=\\\"language-text\\\">/api/v1/shops/photos/</code>). However by listing these out, it became clear root endpoints for the relationships would be more efficient (e.g. <code class=\\\"language-text\\\">/api/v1/photos/menu/:shopSlug/</code>), rather than duplicating it on a bunch of controllers.</p>\\n<h3>App first approach</h3>\\n<p>We used our NextJS frontend and an admin backend as platforms to build out all the missing endpoints and methods (POST, PUT, DELETE). For the most part, It was a fairly simple endeavor of taking our existing functions and migrating them to API controllers. </p>\\n<p>We were able to format our JSON responses Laravel's <a href=\\\"https://laravel.com/docs/5.6/eloquent-resources\\\">API Resources</a>, which allow fine-tuned control of what object properties display (beyond the Model's hidden or protected properties, and any scoped properties). It added the last layer of polish to the API ensuring that our responses weren't inherently tied to our Models/table columns, allowing for more flexibility down the line if we needed to modify any Models (and possibly rename important columns like \\\"featured_img\\\").</p>\\n<h3>Develop 👉 Documentation</h3>\\n<p>Each round of API development was immediately followed with documentation. To facilitate this, I created a GatsbyJS project based on <a href=\\\"https://github.com/lord/slate\\\">Slate</a> that takes a folder full of Markdown files and generates fast and accessible docs. To add endpoints to the API, you simply create a new folder (if one doesn't exist for the endpoint/section), and add a Markdown file with the following headers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\ntitle<span class=\\\"token punctuation\\\">:</span> Get inventory <span class=\\\"token keyword\\\">of</span> specific shop<span class=\\\"token operator\\\">/</span>brand\\nroute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/inventory/menu/:slug\\\"</span>\\nmethod<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"get\\\"</span>\\npage_type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"api\\\"</span>\\nlast_updated<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2018-07-13\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n\\nCode snippets first\\n\\nThen your page info here\\n</code></pre>\\n      </div>\\n<p>Save your file, run the deploy script, and the docs are up to date! Gatsby displays all your docs organized in the sidebar and uses the method in the Markdown header to label each route/endpoint appropriately. Some neat CSS tricks take the code snippets and align them to the right of your text in a separate dark sidebar (on larger viewports).</p>\\n<p>This simplified workflow expedited the documentation process, allowing us to focus on writing (<em>and often just copy/pasting</em>).</p>\\n<h2>New features</h2>\\n<p>I mentioned we only had base endpoints with only the GET methods. Now the API has been expanded from 4 endpoints to over 20! Here are just a few of the endpoints we added:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">/inventory/</code> - Allows you to access the inventory system, whether it's all tracked products, or an individuals shop or brand's menu (<code class=\\\"language-text\\\">/inventory/menu/the-shop-slug-here</code>).</li>\\n<li><code class=\\\"language-text\\\">/photos/</code> - Displays all photos in database, usually attached to posts (like shops, products, etc).</li>\\n<li><code class=\\\"language-text\\\">/states/</code> - Shows a list of 50 states and popular cities for location-based archives.</li>\\n</ul>\\n<h2>So what are the benefits?</h2>\\n<p>As with any software development, mountains of code don't get moved without good reason. We chose to migrate our API to it's own separate home for a few good reasons.</p>\\n<h3>Scalability</h3>\\n<p>Having the API in it's own home makes tasks like clustering, or even splintering into microservices, much easier. Before it would have been impossible without excising the API completely (like we are now).</p>\\n<h3>Maintainability</h3>\\n<p>The more code, the more confusing. Especially when you're dealing with different realms (server and client side) and have different goals for each. Keeping our frontend and backend code separate ensures that primarily - if we break one, the other doesn't break. It's also easier to hand the codebase to a developer and have them grasp it, as opposed to deciphering the difference between the frontend and backend themselves.</p>\\n<h3>Efficiency</h3>\\n<p>By running it as a separate instance from the frontend, we can run the API on a whole different server than our frontend. That improves the load immensely already. And like I mentioned before, we can begin to optimize the API for load balancing.</p>\\n<h2>The future of Kushy apps</h2>\\n<p>Now that we've transitioned to an API-centric architecture, we can start to create applications that leverage it's power. The first app we whipped up was a frontend for Kushy, essentially mirroring the functionality we'd already created with Laravel. The main goal was to create a modern progressive web app, preferably running on ReactJS. </p>\\n<p>We settled on NextJS as a framework to solve a lot of the issues we had with frontend React development:</p>\\n<ul>\\n<li>Single page applications, or SPAs, are notorious for being less SEO friendly. NextJS enables server-side rendering of React, so pages can be hydrated with data before the user renders the page. This ensures important content is always loaded, even if Javascript is disabled client-side.</li>\\n<li>React stacks are known for being full of complex configurations with utilities like Webpack. NextJS comes with preset configs out of the box that handle tasks like code splitting routes.</li>\\n<li>It's easy to use! The most important thing about a framework is how frictionless the experience is, and NextJS rightfully advertises itself as a minimalistic solution.</li>\\n</ul>\\n<p>We'll probably be using NextJS with a few other applications in the future, like our wholesale marketplace, until we discover a more suitable replacement for SSR.</p>\\n<h2>How can I get started with the Kushy API?</h2>\\n<p>If these kind of updates sound intriguing and you want to check out what kind of work we're doing here, you can <a href=\\\"http://kushy.net/developers\\\">sign up and create API credentials here</a> and then follow our <a href=\\\"https://kushy.net/developers/getting-started\\\">getting started guide</a> to see how to authenticate your app using the OAuth 2.0 flow.</p>\\n<p>I can't wait to see the full potential of the Kushy API realized, and a widespread adoption of it. I hope we can standardize this process for the cannabis industry, and provide a proven solution for everyday processes like patient verification or inventory management.</p>\\n<p>Cheers,\\nOscar</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"http://kushy.net/developers/\\\">Kushy API</a></li>\\n<li><a href=\\\"http://kushy.net/developers/apps/\\\">Kushy API - Create API credentials</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Future of the Kushy API\",\"cover_image\":null,\"date\":\"19 July, 2018\",\"tags\":[\"api\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/the-future-of-the-kushy-api/\"}}}]}},\"pathContext\":{\"tag\":\"announcements\",\"slug\":\"/blog/2017/kushy-blog-is-alive/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2017-kushy-blog-is-alive.json\n// module id = 391\n// module chunks = 248487619692878"],"sourceRoot":""}