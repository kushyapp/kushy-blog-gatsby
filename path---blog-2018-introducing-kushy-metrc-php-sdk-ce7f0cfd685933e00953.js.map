{"version":3,"sources":["webpack:///path---blog-2018-introducing-kushy-metrc-php-sdk-ce7f0cfd685933e00953.js","webpack:///./.cache/json/blog-2018-introducing-kushy-metrc-php-sdk.json"],"names":["webpackJsonp","393","module","exports","data","blog","html","frontmatter","title","cover_image","publicURL","childImageSharp","sizes","tracedSVG","src","srcSet","date","tags","section","author","fields","slug","relatedPosts","edges","node","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,qmNAA0mLC,aAAgsCC,MAAA,sBAAAC,aAA6CC,UAAA,mEAAAC,iBAAkGC,OAASC,UAAA,skCAAAC,IAAA,yEAAAC,OAAA,4YAAqjDC,KAAA,gBAAAC,MAAA,sCAAAC,QAAA,OAAAC,OAAA,OAAsGC,QAAWC,KAAA,gDAAsDC,cAAiBC,QAAUC,MAAQlB,KAAA,q7RAAAC,aAAk/RC,MAAA,8BAAAC,YAAA,KAAAO,KAAA,gBAAAC,MAAA,qCAA4HG,QAAWC,KAAA,8CAAqDG,MAAQlB,KAAA;AAAwtpBC,aAA+qCC,MAAA,iDAAAC,YAAA,KAAAO,KAAA,oBAAAC,MAAA,2BAAyIG,QAAWC,KAAA,mEAAyEI,aAAgBC,IAAA,aAAAL,KAAA","file":"path---blog-2018-introducing-kushy-metrc-php-sdk-ce7f0cfd685933e00953.js","sourcesContent":["webpackJsonp([268578735785417],{\n\n/***/ 393:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>Keeping track of legal cannabis is one hell of a job. That's why many states that legalize medicinal and recreational cannabis license a 3rd party seed to sale tracking solution to handle the sticky task. These solutions provide businesses a place to input their activity (plant growth, transfers, sales) so the state can monitor and ensure compliance with all regulations and restrictions. <a href=\\\"http://metrc.com\\\"><strong>METRC</strong></a> is one of these seed to sale tracking solutions currently licensed by 13 states. <a href=\\\"http://kushy.net\\\">Kushy</a> is certified with METRC to access their API, so that we can update seed to sale information on behalf of businesses. </p>\\n<p>In order to make accessing the API easier for our developer, we put together an SDK for PHP programmers looking to quickly query METRC API endpoints. Our goal was to create a simple to use interface for the METRC API, without requiring the user manually input endpoints and whatnot. The result is a simple to use API for an API:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>The Construction</h2>\\n<p>The SDK is a simple class that uses the Guzzle library to create HTTP requests on behalf of the user. Each endpoint 'route' is a separate class that extends the base Guzzle class.</p>\\n<h2>How to use it</h2>\\n<ol>\\n<li>Install the METRC package with Composer: <code class=\\\"language-text\\\">composer require &#39;kushy/metrc-php-sdk&#39;</code></li>\\n<li>Require whichever route class you need in your application - in this case we want to access the <code class=\\\"language-text\\\">/harvests/</code> endpoint (<em>assuming you're using PSR-4</em>):</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Create a new instance of the route class (<code class=\\\"language-text\\\">Harvests</code>) and pass through your state's abbreviated name (in this case <code class=\\\"language-text\\\">ca</code> for California) and Vendor + User API keys:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Use one of the class methods to query the API - this example grabs the active harvests:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>You can find the package on <a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">Packagist here</a>, as well as a README with more details (instructions, tips and tricks, etc).</p>\\n</blockquote>\\n<h2>Making cannabis (development) simpler</h2>\\n<p>Here at Kushy we're always innovating and contributing back to the cannabis community to ensure that life gets easier for everyone in the cannabis chain of command -- from consumers to businesses to developers. If we can make it easier to integrate with METRC, it increases the potential for more excellent apps that keep businesses compliant and safe from losing their license.</p>\\n<p>If you're interested in contributing and improving the SDK, <a href=\\\"https://github.com/kushyapp/kushy-metrc-php-sdk\\\">fork us over on Github and send a PR our way!</a></p>\\n<p>Stay kushy,\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">kushy/metrc-php-sdk</a></li>\\n<li><a href=\\\"http://metrc.com\\\">METRC</a></li>\\n<li><a href=\\\"https://api-ca.metrc.com/Documentation/\\\">METRC API Docs for California</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy METRC PHP SDK\",\"cover_image\":{\"publicURL\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M85 91l-15 2-7 2-1 8c-1 27 11 54 32 70 12 9 11 9 20-1 18-18 27-40 27-65l1-10-7-2c-18-5-32-6-50-4m177 7c-40 5-63 28-49 48 20 29 96 32 125 6 21-20 4-44-35-52-10-2-32-3-41-2m8 10l-2 9c-1 7-1 7-3 5-2-5-6-6-18-6h-11l-3 19-3 20 5 1c4 0 5-1 6-7 1-3 1-3 6-3 6 0 13-3 15-5 0-1 1-1 1 2 0 2 1 3 5 3 6 0 6 0 8-11l2-9 3-1c5 0 5 1 4 8l-2 10-1 3h10v4c-1 5 0 6 6 6 3-1 5-3 4-4h-1c0 2-1 2-4 2h-5l4-18 4-18h23c-1-1-5-2-13-2h-11l-1 3c-1 1-1 2-2 1-1-2-6-4-11-4h-5v-5l1-4-5-1c-4 0-5 0-6 2m-2 16c-4 21-4 20 1 20h4l2-10 1-10h5l6 1-3 17c0 2 0 2 4 2 3 0 4 0 4-2l4-20c-1-3-7-5-13-5-5 0-6 0-4-6l1-3h-9l-3 16m-164-5c0 5 5 18 8 22l2 4c-1 0-7-3-10-6l-7-3-8-3c-4-3-4 0 1 5 6 6 13 10 19 12 3 0 3 0 1 1l-7 1-9 2-5 3 6 1c9 1 13 0 16-1 3-2 4-1 1 1l-4 9c0 2 5-3 8-8l2-2v2c-1 4 1 4 2 0l2-3v-1l1-2c3 0 6-5 4-6v-1l6-12-6 4-4 7-1 2 1-14c0-12 0-12-2-10l-2 10-2 6-2-5-3-6-8-11v2m134-1l-7 35 4 1c4 0 4 0 5-5l1-4 7-1 10-2c8-5 10-18 3-23-3-2-23-3-23-1' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg\",\"srcSet\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-7cc04.jpg 310w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-69042.jpg 620w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg 1240w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-50ab1.jpg 1860w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-de007.jpg 2000w\"}}},\"date\":\"19 July, 2018\",\"tags\":[\"tools\",\"announcements\",\"developers\"],\"section\":\"blog\",\"author\":\"Ryo\"},\"fields\":{\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Kushy was founded with a mission to provide a scalable API for the cannabis industry. So far, our API has been only read-only, with only a few endpoints for our major content areas (shops, products, etc). We haven't actually needed to use the API in any applications, beyond minor showcases of it's GET potential.</p>\\n<p>Now that's all going to change.</p>\\n<p>Over the past few months we've gotten a few feature requests from developers looking to implement the Kushy API into their cannabis apps. And I'm excited to announce that we've met the demand by updating our API from an alpha release to a v1 beta.</p>\\n<p>But enough conceptualizing, let's talk process and progress.</p>\\n<blockquote>\\n<p>Our alpha endpoints were originally labeled 'v3', since it was technically the 3rd version of our alpha. However this was confusing, so we dropped it in favor of v1 to make it simpler for earlier adopters.</p>\\n</blockquote>\\n<p>In a fairly short time, we've been able to isolate our API from our frontend stack, and create microservices and separate applications for our different needs. All of our interfaces now operate independently and interact with the same API, keeping a single source of truth between our suite of apps.</p>\\n<h2>Built from the ground up</h2>\\n<p>Rather than building the API purely abstractly through some OpenAPI/Swagger docs, we opted to take a more practical approach to the API development. Using the our own API to build applications for internal and client-side use, we've been able to pinpoint any issues that developers may encounter while integrating.</p>\\n<p>Though we did seek a more practical route, it does not mean we didn't plan our approach. The first step was planning out the entire API. Every endpoint had to be listed to ensure we had a place to query every type of data. Relationships were the trickiest part, it was tempting to create relational endpoints on each parent endpoint (e.g. <code class=\\\"language-text\\\">/api/v1/shops/photos/</code>). However by listing these out, it became clear root endpoints for the relationships would be more efficient (e.g. <code class=\\\"language-text\\\">/api/v1/photos/menu/:shopSlug/</code>), rather than duplicating it on a bunch of controllers.</p>\\n<h3>App first approach</h3>\\n<p>We used our NextJS frontend and an admin backend as platforms to build out all the missing endpoints and methods (POST, PUT, DELETE). For the most part, It was a fairly simple endeavor of taking our existing functions and migrating them to API controllers. </p>\\n<p>We were able to format our JSON responses Laravel's <a href=\\\"https://laravel.com/docs/5.6/eloquent-resources\\\">API Resources</a>, which allow fine-tuned control of what object properties display (beyond the Model's hidden or protected properties, and any scoped properties). It added the last layer of polish to the API ensuring that our responses weren't inherently tied to our Models/table columns, allowing for more flexibility down the line if we needed to modify any Models (and possibly rename important columns like \\\"featured_img\\\").</p>\\n<h3>Develop 👉 Documentation</h3>\\n<p>Each round of API development was immediately followed with documentation. To facilitate this, I created a GatsbyJS project based on <a href=\\\"https://github.com/lord/slate\\\">Slate</a> that takes a folder full of Markdown files and generates fast and accessible docs. To add endpoints to the API, you simply create a new folder (if one doesn't exist for the endpoint/section), and add a Markdown file with the following headers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\ntitle<span class=\\\"token punctuation\\\">:</span> Get inventory <span class=\\\"token keyword\\\">of</span> specific shop<span class=\\\"token operator\\\">/</span>brand\\nroute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/inventory/menu/:slug\\\"</span>\\nmethod<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"get\\\"</span>\\npage_type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"api\\\"</span>\\nlast_updated<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2018-07-13\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n\\nCode snippets first\\n\\nThen your page info here\\n</code></pre>\\n      </div>\\n<p>Save your file, run the deploy script, and the docs are up to date! Gatsby displays all your docs organized in the sidebar and uses the method in the Markdown header to label each route/endpoint appropriately. Some neat CSS tricks take the code snippets and align them to the right of your text in a separate dark sidebar (on larger viewports).</p>\\n<p>This simplified workflow expedited the documentation process, allowing us to focus on writing (<em>and often just copy/pasting</em>).</p>\\n<h2>New features</h2>\\n<p>I mentioned we only had base endpoints with only the GET methods. Now the API has been expanded from 4 endpoints to over 20! Here are just a few of the endpoints we added:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">/inventory/</code> - Allows you to access the inventory system, whether it's all tracked products, or an individuals shop or brand's menu (<code class=\\\"language-text\\\">/inventory/menu/the-shop-slug-here</code>).</li>\\n<li><code class=\\\"language-text\\\">/photos/</code> - Displays all photos in database, usually attached to posts (like shops, products, etc).</li>\\n<li><code class=\\\"language-text\\\">/states/</code> - Shows a list of 50 states and popular cities for location-based archives.</li>\\n</ul>\\n<h2>So what are the benefits?</h2>\\n<p>As with any software development, mountains of code don't get moved without good reason. We chose to migrate our API to it's own separate home for a few good reasons.</p>\\n<h3>Scalability</h3>\\n<p>Having the API in it's own home makes tasks like clustering, or even splintering into microservices, much easier. Before it would have been impossible without excising the API completely (like we are now).</p>\\n<h3>Maintainability</h3>\\n<p>The more code, the more confusing. Especially when you're dealing with different realms (server and client side) and have different goals for each. Keeping our frontend and backend code separate ensures that primarily - if we break one, the other doesn't break. It's also easier to hand the codebase to a developer and have them grasp it, as opposed to deciphering the difference between the frontend and backend themselves.</p>\\n<h3>Efficiency</h3>\\n<p>By running it as a separate instance from the frontend, we can run the API on a whole different server than our frontend. That improves the load immensely already. And like I mentioned before, we can begin to optimize the API for load balancing.</p>\\n<h2>The future of Kushy apps</h2>\\n<p>Now that we've transitioned to an API-centric architecture, we can start to create applications that leverage it's power. The first app we whipped up was a frontend for Kushy, essentially mirroring the functionality we'd already created with Laravel. The main goal was to create a modern progressive web app, preferably running on ReactJS. </p>\\n<p>We settled on NextJS as a framework to solve a lot of the issues we had with frontend React development:</p>\\n<ul>\\n<li>Single page applications, or SPAs, are notorious for being less SEO friendly. NextJS enables server-side rendering of React, so pages can be hydrated with data before the user renders the page. This ensures important content is always loaded, even if Javascript is disabled client-side.</li>\\n<li>React stacks are known for being full of complex configurations with utilities like Webpack. NextJS comes with preset configs out of the box that handle tasks like code splitting routes.</li>\\n<li>It's easy to use! The most important thing about a framework is how frictionless the experience is, and NextJS rightfully advertises itself as a minimalistic solution.</li>\\n</ul>\\n<p>We'll probably be using NextJS with a few other applications in the future, like our wholesale marketplace, until we discover a more suitable replacement for SSR.</p>\\n<h2>How can I get started with the Kushy API?</h2>\\n<p>If these kind of updates sound intriguing and you want to check out what kind of work we're doing here, you can <a href=\\\"http://kushy.net/developers\\\">sign up and create API credentials here</a> and then follow our <a href=\\\"https://kushy.net/developers/getting-started\\\">getting started guide</a> to see how to authenticate your app using the OAuth 2.0 flow.</p>\\n<p>I can't wait to see the full potential of the Kushy API realized, and a widespread adoption of it. I hope we can standardize this process for the cannabis industry, and provide a proven solution for everyday processes like patient verification or inventory management.</p>\\n<p>Cheers,\\nOscar</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"http://kushy.net/developers/\\\">Kushy API</a></li>\\n<li><a href=\\\"http://kushy.net/developers/apps/\\\">Kushy API - Create API credentials</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Future of the Kushy API\",\"cover_image\":null,\"date\":\"23 July, 2018\",\"tags\":[\"api\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/the-future-of-the-kushy-api/\"}}},{\"node\":{\"html\":\"<p>How do you get pictures of over 9,000 cannabis strains? You could start a very long and expensive journey of buying and documenting thousands of products. Or you can get the community pitch in their pot (pics).</p>\\n<p>When it came time to fill up the Kushy database with a myriad of dank images, we looked to WeedPornDaily, an online cannabis publication and community. Users of WPD can <a href=\\\"http://weedporndaily.com/contribute\\\">submit photos to the website</a> through a Tumblr submission form, or are curated by the staff from known stoney sources. With over 7 years of pot photos stockpiled and <a href=\\\"http://weedporndaily.tumblr.com/tagged/blue-dream\\\">organized neatly by tag</a>, we were able to effortlessly search through the archive and fill our database.</p>\\n<h2>The Code</h2>\\n<p>This was a pretty simple task. We take our database of over 9,000 cannabis strains and run it against the public Tumblr XML. Each strain name would be <a href=\\\"http://weedporndaily.tumblr.com/tagged/blue-dream/xml\\\">checked as a Tumblr tag</a>, and if we got photos, we'd input it into an image database. The images would be associated with an <code class=\\\"language-text\\\">item_id</code> and <code class=\\\"language-text\\\">item_type</code>, where <strong>type</strong> would be <em>strains</em> and <strong>ID</strong> would be the <em>Strain ID</em>. And we'd store the image caption, would contains additional credit for the image source.</p>\\n<p>With PHP, this is accomplished fairly crudely using a combination of cURL and non-PDO SQL interactions:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token comment\\\">//mySQL</span>\\n<span class=\\\"token comment\\\">// connect to mysql</span>\\n<span class=\\\"token variable\\\">$servername</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$username</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"user\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$password</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"super_secret\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$dbname</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"kushy_api\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Create connection</span>\\n<span class=\\\"token variable\\\">$conn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">mysqli</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$servername</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$username</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$password</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$dbname</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Check connection</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">connect_error</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">die</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token double-quoted-string string\\\">\\\"Connection failed: \\\"</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">connect_error</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get_data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token variable\\\">$ch</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curl_init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token variable\\\">$timeout</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">CURLOPT_URL</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">CURLOPT_RETURNTRANSFER</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">CURLOPT_CONNECTTIMEOUT</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$timeout</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token constant\\\">CURLOPT_USERAGENT</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token single-quoted-string string\\\">'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token variable\\\">$data</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curl_exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$data</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Select all strains</span>\\n<span class=\\\"token variable\\\">$sql</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"SELECT * from strains\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$result</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sql</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Open log file</span>\\n<span class=\\\"token variable\\\">$my_file</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'error-strains.txt'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$handle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fopen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$my_file</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'w'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">or</span> <span class=\\\"token keyword\\\">die</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Cannot open file:  '</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$my_file</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// If we got some strains</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$result</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">num_rows</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// loop through each sql result row</span>\\n\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$row</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$result</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">fetch_assoc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t     <span class=\\\"token comment\\\">// reset error handling</span>\\n        <span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$strain_id</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'id'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$name</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'name'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// pull API</span>\\n        <span class=\\\"token variable\\\">$url</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"http://weedporndaily.tumblr.com/tagged/<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$name</span></span>/xml\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$json_new</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get_data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        \\n        <span class=\\\"token comment\\\">// checks if Tumblr spit back a 400 Bad Request, or a real XML object</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$object</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SimpleXmlElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$json_new</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Exception</span> <span class=\\\"token variable\\\">$e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Do something with the exception, or ignore it.</span>\\n            <span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// log strains that don't have images</span>\\n            <span class=\\\"token variable\\\">$data</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"\\\\n\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$name</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">fwrite</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$handle</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$data</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n        <span class=\\\"token comment\\\">// if no error</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// make sure we have a post</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$object</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">posts</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">post</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// loop through each post</span>\\n            <span class=\\\"token keyword\\\">foreach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$object</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">posts</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">post</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token variable\\\">$entry</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// only proceed if we actually have a photo URL</span>\\n                <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$entry</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token single-quoted-string string\\\">'photo-url'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token variable\\\">$photo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$entry</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token single-quoted-string string\\\">'photo-url'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token variable\\\">$caption</span> <span class=\\\"token operator\\\">=</span>  <span class=\\\"token variable\\\">$entry</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token single-quoted-string string\\\">'photo-caption'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token double-quoted-string string\\\">\\\"&lt;li>&lt;a href='<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$photo</span></span>'>&lt;img src='<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$photo</span></span>' width='100' />&lt;/a>&lt;/li>\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token comment\\\">// Insert into DB</span>\\n                    <span class=\\\"token variable\\\">$sql</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"INSERT INTO images ( item_id, item_type, image_url, caption )\\n                    VALUES ('<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$strain_id</span></span>', 'strains', '<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$photo</span></span>', '<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$caption</span></span>')\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token comment\\\">//check for errors - print in JS console</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sql</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">TRUE</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token delimiter important\\\">?></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">></span>\\n                        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Success'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token delimiter important\\\">&lt;?php</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token delimiter important\\\">?></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">></span>\\n                        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>`Error <span class=\\\"token delimiter important\\\">&lt;?php</span> <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token function\\\">mysqli_error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$conn</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token delimiter important\\\">?></span>`<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token delimiter important\\\">&lt;?php</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">fclose</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$handle</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>We also create a log (<code class=\\\"language-text\\\">error-strains.txt</code>) of every strain that isn't represented on Tumblr, so we can double check and have a better understanding of where the holes are in the data.</p>\\n<h2>The Result</h2>\\n<p>After about 30 minutes of processing, we pulled over 3,000 photos for our 9,000+ strains. </p>\\n<p>And that's only pulling the <em>first page</em> of images for each strain that was picked up. Many strains have hundreds of pages of images, like <a href=\\\"http://weedporndaily.tumblr.com/tagged/og-kush\\\">O.G. Kush</a>, which would give us easily over 10k images alone. We'll save that scrape for another day.</p>\\n<p>Thank you again to WeedPornDaily and it's community for providing the immense wealth of well sorted cannabis for us to parse and import into the <a href=\\\"http://api.kushy.net\\\">Kushy API</a></p>\\n<p>Oscar</p>\\n<hr>\\n<p><strong>Keep Reading:</strong></p>\\n<ul>\\n<li><a href=\\\"http://weedporndaily.com\\\">WeedPornDaily</a></li>\\n<li><a href=\\\"https://www.tumblr.com/docs/en/api/v1\\\">Tumblr API v1</a></li>\\n<li><a href=\\\"http://github.com/kushyapp\\\">Kushy Github</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Integrating Crowd Sourced Cannabis from Tumblr\",\"cover_image\":null,\"date\":\"10 December, 2017\",\"tags\":[\"spotlight\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2017/integrating-crowd-sourced-cannabis-from-tumblr/\"}}}]}},\"pathContext\":{\"tag\":\"developers\",\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2018-introducing-kushy-metrc-php-sdk-ce7f0cfd685933e00953.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>Keeping track of legal cannabis is one hell of a job. That's why many states that legalize medicinal and recreational cannabis license a 3rd party seed to sale tracking solution to handle the sticky task. These solutions provide businesses a place to input their activity (plant growth, transfers, sales) so the state can monitor and ensure compliance with all regulations and restrictions. <a href=\\\"http://metrc.com\\\"><strong>METRC</strong></a> is one of these seed to sale tracking solutions currently licensed by 13 states. <a href=\\\"http://kushy.net\\\">Kushy</a> is certified with METRC to access their API, so that we can update seed to sale information on behalf of businesses. </p>\\n<p>In order to make accessing the API easier for our developer, we put together an SDK for PHP programmers looking to quickly query METRC API endpoints. Our goal was to create a simple to use interface for the METRC API, without requiring the user manually input endpoints and whatnot. The result is a simple to use API for an API:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>The Construction</h2>\\n<p>The SDK is a simple class that uses the Guzzle library to create HTTP requests on behalf of the user. Each endpoint 'route' is a separate class that extends the base Guzzle class.</p>\\n<h2>How to use it</h2>\\n<ol>\\n<li>Install the METRC package with Composer: <code class=\\\"language-text\\\">composer require &#39;kushy/metrc-php-sdk&#39;</code></li>\\n<li>Require whichever route class you need in your application - in this case we want to access the <code class=\\\"language-text\\\">/harvests/</code> endpoint (<em>assuming you're using PSR-4</em>):</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Create a new instance of the route class (<code class=\\\"language-text\\\">Harvests</code>) and pass through your state's abbreviated name (in this case <code class=\\\"language-text\\\">ca</code> for California) and Vendor + User API keys:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Use one of the class methods to query the API - this example grabs the active harvests:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>You can find the package on <a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">Packagist here</a>, as well as a README with more details (instructions, tips and tricks, etc).</p>\\n</blockquote>\\n<h2>Making cannabis (development) simpler</h2>\\n<p>Here at Kushy we're always innovating and contributing back to the cannabis community to ensure that life gets easier for everyone in the cannabis chain of command -- from consumers to businesses to developers. If we can make it easier to integrate with METRC, it increases the potential for more excellent apps that keep businesses compliant and safe from losing their license.</p>\\n<p>If you're interested in contributing and improving the SDK, <a href=\\\"https://github.com/kushyapp/kushy-metrc-php-sdk\\\">fork us over on Github and send a PR our way!</a></p>\\n<p>Stay kushy,\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">kushy/metrc-php-sdk</a></li>\\n<li><a href=\\\"http://metrc.com\\\">METRC</a></li>\\n<li><a href=\\\"https://api-ca.metrc.com/Documentation/\\\">METRC API Docs for California</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy METRC PHP SDK\",\"cover_image\":{\"publicURL\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M85 91l-15 2-7 2-1 8c-1 27 11 54 32 70 12 9 11 9 20-1 18-18 27-40 27-65l1-10-7-2c-18-5-32-6-50-4m177 7c-40 5-63 28-49 48 20 29 96 32 125 6 21-20 4-44-35-52-10-2-32-3-41-2m8 10l-2 9c-1 7-1 7-3 5-2-5-6-6-18-6h-11l-3 19-3 20 5 1c4 0 5-1 6-7 1-3 1-3 6-3 6 0 13-3 15-5 0-1 1-1 1 2 0 2 1 3 5 3 6 0 6 0 8-11l2-9 3-1c5 0 5 1 4 8l-2 10-1 3h10v4c-1 5 0 6 6 6 3-1 5-3 4-4h-1c0 2-1 2-4 2h-5l4-18 4-18h23c-1-1-5-2-13-2h-11l-1 3c-1 1-1 2-2 1-1-2-6-4-11-4h-5v-5l1-4-5-1c-4 0-5 0-6 2m-2 16c-4 21-4 20 1 20h4l2-10 1-10h5l6 1-3 17c0 2 0 2 4 2 3 0 4 0 4-2l4-20c-1-3-7-5-13-5-5 0-6 0-4-6l1-3h-9l-3 16m-164-5c0 5 5 18 8 22l2 4c-1 0-7-3-10-6l-7-3-8-3c-4-3-4 0 1 5 6 6 13 10 19 12 3 0 3 0 1 1l-7 1-9 2-5 3 6 1c9 1 13 0 16-1 3-2 4-1 1 1l-4 9c0 2 5-3 8-8l2-2v2c-1 4 1 4 2 0l2-3v-1l1-2c3 0 6-5 4-6v-1l6-12-6 4-4 7-1 2 1-14c0-12 0-12-2-10l-2 10-2 6-2-5-3-6-8-11v2m134-1l-7 35 4 1c4 0 4 0 5-5l1-4 7-1 10-2c8-5 10-18 3-23-3-2-23-3-23-1' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg\",\"srcSet\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-7cc04.jpg 310w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-69042.jpg 620w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg 1240w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-50ab1.jpg 1860w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-de007.jpg 2000w\"}}},\"date\":\"19 July, 2018\",\"tags\":[\"tools\",\"announcements\",\"developers\"],\"section\":\"blog\",\"author\":\"Ryo\"},\"fields\":{\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Kushy was founded with a mission to provide a scalable API for the cannabis industry. So far, our API has been only read-only, with only a few endpoints for our major content areas (shops, products, etc). We haven't actually needed to use the API in any applications, beyond minor showcases of it's GET potential.</p>\\n<p>Now that's all going to change.</p>\\n<p>Over the past few months we've gotten a few feature requests from developers looking to implement the Kushy API into their cannabis apps. And I'm excited to announce that we've met the demand by updating our API from an alpha release to a v1 beta.</p>\\n<p>But enough conceptualizing, let's talk process and progress.</p>\\n<blockquote>\\n<p>Our alpha endpoints were originally labeled 'v3', since it was technically the 3rd version of our alpha. However this was confusing, so we dropped it in favor of v1 to make it simpler for earlier adopters.</p>\\n</blockquote>\\n<p>In a fairly short time, we've been able to isolate our API from our frontend stack, and create microservices and separate applications for our different needs. All of our interfaces now operate independently and interact with the same API, keeping a single source of truth between our suite of apps.</p>\\n<h2>Built from the ground up</h2>\\n<p>Rather than building the API purely abstractly through some OpenAPI/Swagger docs, we opted to take a more practical approach to the API development. Using the our own API to build applications for internal and client-side use, we've been able to pinpoint any issues that developers may encounter while integrating.</p>\\n<p>Though we did seek a more practical route, it does not mean we didn't plan our approach. The first step was planning out the entire API. Every endpoint had to be listed to ensure we had a place to query every type of data. Relationships were the trickiest part, it was tempting to create relational endpoints on each parent endpoint (e.g. <code class=\\\"language-text\\\">/api/v1/shops/photos/</code>). However by listing these out, it became clear root endpoints for the relationships would be more efficient (e.g. <code class=\\\"language-text\\\">/api/v1/photos/menu/:shopSlug/</code>), rather than duplicating it on a bunch of controllers.</p>\\n<h3>App first approach</h3>\\n<p>We used our NextJS frontend and an admin backend as platforms to build out all the missing endpoints and methods (POST, PUT, DELETE). For the most part, It was a fairly simple endeavor of taking our existing functions and migrating them to API controllers. </p>\\n<p>We were able to format our JSON responses Laravel's <a href=\\\"https://laravel.com/docs/5.6/eloquent-resources\\\">API Resources</a>, which allow fine-tuned control of what object properties display (beyond the Model's hidden or protected properties, and any scoped properties). It added the last layer of polish to the API ensuring that our responses weren't inherently tied to our Models/table columns, allowing for more flexibility down the line if we needed to modify any Models (and possibly rename important columns like \\\"featured_img\\\").</p>\\n<h3>Develop 👉 Documentation</h3>\\n<p>Each round of API development was immediately followed with documentation. To facilitate this, I created a GatsbyJS project based on <a href=\\\"https://github.com/lord/slate\\\">Slate</a> that takes a folder full of Markdown files and generates fast and accessible docs. To add endpoints to the API, you simply create a new folder (if one doesn't exist for the endpoint/section), and add a Markdown file with the following headers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\ntitle<span class=\\\"token punctuation\\\">:</span> Get inventory <span class=\\\"token keyword\\\">of</span> specific shop<span class=\\\"token operator\\\">/</span>brand\\nroute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/inventory/menu/:slug\\\"</span>\\nmethod<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"get\\\"</span>\\npage_type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"api\\\"</span>\\nlast_updated<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2018-07-13\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n\\nCode snippets first\\n\\nThen your page info here\\n</code></pre>\\n      </div>\\n<p>Save your file, run the deploy script, and the docs are up to date! Gatsby displays all your docs organized in the sidebar and uses the method in the Markdown header to label each route/endpoint appropriately. Some neat CSS tricks take the code snippets and align them to the right of your text in a separate dark sidebar (on larger viewports).</p>\\n<p>This simplified workflow expedited the documentation process, allowing us to focus on writing (<em>and often just copy/pasting</em>).</p>\\n<h2>New features</h2>\\n<p>I mentioned we only had base endpoints with only the GET methods. Now the API has been expanded from 4 endpoints to over 20! Here are just a few of the endpoints we added:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">/inventory/</code> - Allows you to access the inventory system, whether it's all tracked products, or an individuals shop or brand's menu (<code class=\\\"language-text\\\">/inventory/menu/the-shop-slug-here</code>).</li>\\n<li><code class=\\\"language-text\\\">/photos/</code> - Displays all photos in database, usually attached to posts (like shops, products, etc).</li>\\n<li><code class=\\\"language-text\\\">/states/</code> - Shows a list of 50 states and popular cities for location-based archives.</li>\\n</ul>\\n<h2>So what are the benefits?</h2>\\n<p>As with any software development, mountains of code don't get moved without good reason. We chose to migrate our API to it's own separate home for a few good reasons.</p>\\n<h3>Scalability</h3>\\n<p>Having the API in it's own home makes tasks like clustering, or even splintering into microservices, much easier. Before it would have been impossible without excising the API completely (like we are now).</p>\\n<h3>Maintainability</h3>\\n<p>The more code, the more confusing. Especially when you're dealing with different realms (server and client side) and have different goals for each. Keeping our frontend and backend code separate ensures that primarily - if we break one, the other doesn't break. It's also easier to hand the codebase to a developer and have them grasp it, as opposed to deciphering the difference between the frontend and backend themselves.</p>\\n<h3>Efficiency</h3>\\n<p>By running it as a separate instance from the frontend, we can run the API on a whole different server than our frontend. That improves the load immensely already. And like I mentioned before, we can begin to optimize the API for load balancing.</p>\\n<h2>The future of Kushy apps</h2>\\n<p>Now that we've transitioned to an API-centric architecture, we can start to create applications that leverage it's power. The first app we whipped up was a frontend for Kushy, essentially mirroring the functionality we'd already created with Laravel. The main goal was to create a modern progressive web app, preferably running on ReactJS. </p>\\n<p>We settled on NextJS as a framework to solve a lot of the issues we had with frontend React development:</p>\\n<ul>\\n<li>Single page applications, or SPAs, are notorious for being less SEO friendly. NextJS enables server-side rendering of React, so pages can be hydrated with data before the user renders the page. This ensures important content is always loaded, even if Javascript is disabled client-side.</li>\\n<li>React stacks are known for being full of complex configurations with utilities like Webpack. NextJS comes with preset configs out of the box that handle tasks like code splitting routes.</li>\\n<li>It's easy to use! The most important thing about a framework is how frictionless the experience is, and NextJS rightfully advertises itself as a minimalistic solution.</li>\\n</ul>\\n<p>We'll probably be using NextJS with a few other applications in the future, like our wholesale marketplace, until we discover a more suitable replacement for SSR.</p>\\n<h2>How can I get started with the Kushy API?</h2>\\n<p>If these kind of updates sound intriguing and you want to check out what kind of work we're doing here, you can <a href=\\\"http://kushy.net/developers\\\">sign up and create API credentials here</a> and then follow our <a href=\\\"https://kushy.net/developers/getting-started\\\">getting started guide</a> to see how to authenticate your app using the OAuth 2.0 flow.</p>\\n<p>I can't wait to see the full potential of the Kushy API realized, and a widespread adoption of it. I hope we can standardize this process for the cannabis industry, and provide a proven solution for everyday processes like patient verification or inventory management.</p>\\n<p>Cheers,\\nOscar</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"http://kushy.net/developers/\\\">Kushy API</a></li>\\n<li><a href=\\\"http://kushy.net/developers/apps/\\\">Kushy API - Create API credentials</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Future of the Kushy API\",\"cover_image\":null,\"date\":\"23 July, 2018\",\"tags\":[\"api\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/the-future-of-the-kushy-api/\"}}},{\"node\":{\"html\":\"<p>How do you get pictures of over 9,000 cannabis strains? You could start a very long and expensive journey of buying and documenting thousands of products. Or you can get the community pitch in their pot (pics).</p>\\n<p>When it came time to fill up the Kushy database with a myriad of dank images, we looked to WeedPornDaily, an online cannabis publication and community. Users of WPD can <a href=\\\"http://weedporndaily.com/contribute\\\">submit photos to the website</a> through a Tumblr submission form, or are curated by the staff from known stoney sources. With over 7 years of pot photos stockpiled and <a href=\\\"http://weedporndaily.tumblr.com/tagged/blue-dream\\\">organized neatly by tag</a>, we were able to effortlessly search through the archive and fill our database.</p>\\n<h2>The Code</h2>\\n<p>This was a pretty simple task. We take our database of over 9,000 cannabis strains and run it against the public Tumblr XML. Each strain name would be <a href=\\\"http://weedporndaily.tumblr.com/tagged/blue-dream/xml\\\">checked as a Tumblr tag</a>, and if we got photos, we'd input it into an image database. The images would be associated with an <code class=\\\"language-text\\\">item_id</code> and <code class=\\\"language-text\\\">item_type</code>, where <strong>type</strong> would be <em>strains</em> and <strong>ID</strong> would be the <em>Strain ID</em>. And we'd store the image caption, would contains additional credit for the image source.</p>\\n<p>With PHP, this is accomplished fairly crudely using a combination of cURL and non-PDO SQL interactions:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token comment\\\">//mySQL</span>\\n<span class=\\\"token comment\\\">// connect to mysql</span>\\n<span class=\\\"token variable\\\">$servername</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$username</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"user\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$password</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"super_secret\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$dbname</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"kushy_api\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Create connection</span>\\n<span class=\\\"token variable\\\">$conn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">mysqli</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$servername</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$username</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$password</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$dbname</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Check connection</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">connect_error</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">die</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token double-quoted-string string\\\">\\\"Connection failed: \\\"</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">connect_error</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get_data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token variable\\\">$ch</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curl_init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token variable\\\">$timeout</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">CURLOPT_URL</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">CURLOPT_RETURNTRANSFER</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">CURLOPT_CONNECTTIMEOUT</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$timeout</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">curl_setopt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token constant\\\">CURLOPT_USERAGENT</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token single-quoted-string string\\\">'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token variable\\\">$data</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curl_exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token function\\\">curl_close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$ch</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$data</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Select all strains</span>\\n<span class=\\\"token variable\\\">$sql</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"SELECT * from strains\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$result</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sql</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Open log file</span>\\n<span class=\\\"token variable\\\">$my_file</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'error-strains.txt'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$handle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fopen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$my_file</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'w'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">or</span> <span class=\\\"token keyword\\\">die</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Cannot open file:  '</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$my_file</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// If we got some strains</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$result</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">num_rows</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// loop through each sql result row</span>\\n\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$row</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$result</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">fetch_assoc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t     <span class=\\\"token comment\\\">// reset error handling</span>\\n        <span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$strain_id</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'id'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$name</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'name'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// pull API</span>\\n        <span class=\\\"token variable\\\">$url</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"http://weedporndaily.tumblr.com/tagged/<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$name</span></span>/xml\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$json_new</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get_data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$url</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        \\n        <span class=\\\"token comment\\\">// checks if Tumblr spit back a 400 Bad Request, or a real XML object</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$object</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SimpleXmlElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$json_new</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Exception</span> <span class=\\\"token variable\\\">$e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Do something with the exception, or ignore it.</span>\\n            <span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// log strains that don't have images</span>\\n            <span class=\\\"token variable\\\">$data</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"\\\\n\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$name</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">fwrite</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$handle</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$data</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n        <span class=\\\"token comment\\\">// if no error</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// make sure we have a post</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$object</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">posts</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">post</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// loop through each post</span>\\n            <span class=\\\"token keyword\\\">foreach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$object</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">posts</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">post</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token variable\\\">$entry</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// only proceed if we actually have a photo URL</span>\\n                <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$entry</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token single-quoted-string string\\\">'photo-url'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token variable\\\">$photo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$entry</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token single-quoted-string string\\\">'photo-url'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token variable\\\">$caption</span> <span class=\\\"token operator\\\">=</span>  <span class=\\\"token variable\\\">$entry</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token single-quoted-string string\\\">'photo-caption'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token double-quoted-string string\\\">\\\"&lt;li>&lt;a href='<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$photo</span></span>'>&lt;img src='<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$photo</span></span>' width='100' />&lt;/a>&lt;/li>\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token comment\\\">// Insert into DB</span>\\n                    <span class=\\\"token variable\\\">$sql</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token double-quoted-string string\\\">\\\"INSERT INTO images ( item_id, item_type, image_url, caption )\\n                    VALUES ('<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$strain_id</span></span>', 'strains', '<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$photo</span></span>', '<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$caption</span></span>')\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token comment\\\">//check for errors - print in JS console</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$conn</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sql</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">TRUE</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token delimiter important\\\">?></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">></span>\\n                        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Success'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token delimiter important\\\">&lt;?php</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token delimiter important\\\">?></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">></span>\\n                        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>`Error <span class=\\\"token delimiter important\\\">&lt;?php</span> <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token function\\\">mysqli_error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$conn</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token delimiter important\\\">?></span>`<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token delimiter important\\\">&lt;?php</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">fclose</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$handle</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>We also create a log (<code class=\\\"language-text\\\">error-strains.txt</code>) of every strain that isn't represented on Tumblr, so we can double check and have a better understanding of where the holes are in the data.</p>\\n<h2>The Result</h2>\\n<p>After about 30 minutes of processing, we pulled over 3,000 photos for our 9,000+ strains. </p>\\n<p>And that's only pulling the <em>first page</em> of images for each strain that was picked up. Many strains have hundreds of pages of images, like <a href=\\\"http://weedporndaily.tumblr.com/tagged/og-kush\\\">O.G. Kush</a>, which would give us easily over 10k images alone. We'll save that scrape for another day.</p>\\n<p>Thank you again to WeedPornDaily and it's community for providing the immense wealth of well sorted cannabis for us to parse and import into the <a href=\\\"http://api.kushy.net\\\">Kushy API</a></p>\\n<p>Oscar</p>\\n<hr>\\n<p><strong>Keep Reading:</strong></p>\\n<ul>\\n<li><a href=\\\"http://weedporndaily.com\\\">WeedPornDaily</a></li>\\n<li><a href=\\\"https://www.tumblr.com/docs/en/api/v1\\\">Tumblr API v1</a></li>\\n<li><a href=\\\"http://github.com/kushyapp\\\">Kushy Github</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Integrating Crowd Sourced Cannabis from Tumblr\",\"cover_image\":null,\"date\":\"10 December, 2017\",\"tags\":[\"spotlight\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2017/integrating-crowd-sourced-cannabis-from-tumblr/\"}}}]}},\"pathContext\":{\"tag\":\"developers\",\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2018-introducing-kushy-metrc-php-sdk.json\n// module id = 393\n// module chunks = 268578735785417"],"sourceRoot":""}