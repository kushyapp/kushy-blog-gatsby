{"version":3,"sources":["webpack:///path---blog-2017-the-start-of-the-future-ffb389ab5c54dd797db1.js","webpack:///./.cache/json/blog-2017-the-start-of-the-future.json"],"names":["webpackJsonp","392","module","exports","data","blog","html","frontmatter","title","cover_image","date","tags","section","author","fields","slug","relatedPosts","edges","node","publicURL","childImageSharp","sizes","src","srcSet","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,gjMAAm8CC,aAAmoJC,MAAA,0BAAAC,YAAA,KAAAC,KAAA,oBAAAC,MAAA,iBAAAC,QAAA,OAAAC,OAAA,OAAyIC,QAAWC,KAAA,wCAA8CC,cAAiBC,QAAUC,MAAQZ,KAAA,q7RAAAC,aAAk/RC,MAAA,8BAAAC,YAAA,KAAAC,KAAA,gBAAAC,MAAA,qCAA4HG,QAAWC,KAAA,8CAAqDG,MAAQZ,KAAA,qmNAA0mLC,aAAgsCC,MAAA,sBAAAC,aAA6CU,UAAA,mEAAAC,iBAAkGC,OAASC,IAAA,yEAAAC,OAAA,4YAAmeb,KAAA,gBAAAC,MAAA,uCAAsEG,QAAWC,KAAA,oDAA0DS,aAAgBC,IAAA,gBAAAV,KAAA","file":"path---blog-2017-the-start-of-the-future-ffb389ab5c54dd797db1.js","sourcesContent":["webpackJsonp([84343905927806],{\n\n/***/ 392:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>We're big fans of fast, responsive apps. There's nothing more discouraging than slugging around a website, waiting for each page to chug into place. Things should be reactive to our actions, and feel fairly seamless. The opposite of clunky.</p>\\n<p>Here at Kushy, we've done our best to develop a website full of all the features we need. The one thing we've struggled with, is the <strong>user experience</strong>. As good as our design is, we're inherently limited by our framework, which makes the site slower than we'd prefer. </p>\\n<p>Now we're hoping to shed our relationship with Wordpress and migrate our tech stack to a more efficient architecture.</p>\\n<h2>Introducing new.kushy.net</h2>\\n<p>This will be the home of our new developments with technology like React, Node, etc ðŸ‘‰ <a href=\\\"http://new.kushy.net\\\">new.kushy.net</a> ðŸ‘ˆ Test away! Let us know what you think about the look, feel, and functionality.</p>\\n<h3>The New Tech Stack</h3>\\n<p>The plan is to run a NodeJS/Express based API, which transmits our cannabis data to anyone. We'll have a React app on another NodeJS server that server side renders our app to ensure best SEO practices and improve UX. Businesses will have their own dashboard to connect to the API and manage their shops, inventory, etc -- this'll be created with PHP7 and jQuery for the highest level of compatibility and better safety than using heavy client-side scripts.</p>\\n<blockquote>\\n<p>Business Dashboard &#x3C;-- (Node API) -> React</p>\\n</blockquote>\\n<h2>Wordpress is slow</h2>\\n<p>We're currently running Wordpress as our CMS, with a couple handfuls of plugins to transform Wordpress into a different beast. It can scale, but requires lots of tweaking and extra paid services (CDNs, cloud distribution, etc). And it <em>works</em>, but requires custom written plugins. Which is almost <em>insulting</em>, when the community touts the expansiveness of the plugin ecosystem, and most plugins are so poorly written they bog down your site (<em>or create immense security risks</em>).</p>\\n<p>Rather than rewriting the plugins, and dropping cash on CDNs, we opted to spend the development time engineering a new, custom codebase.</p>\\n<h2>Don't You Have An API?</h2>\\n<p>We first used the Wordpress API as the primary cannabis API. Then we migrated to the Directus API, which made the process faster and easier. Now we've hit the wall with the current API, where we're requiring really custom endpoints that do specialized queries (lat/lng region mapping, complex JOINs, lots of good stuff). </p>\\n<p>We could edit the Directus API to accomplish our goal, but we weren't a fan of codebase. And after minimal testing using Node and Express, it became clear it'd be faster to write it from scratch -- our way.</p>\\n<h2>Time to create the future</h2>\\n<p>The future contains a lot of JavaScript.</p>\\n<h3>NodeJS</h3>\\n<p>We use Node for our server because of how lightweight and fast it is. It's also incredibly easy to cluster Node server, as well as break up Node apps into microservices to spread across the cloud. </p>\\n<blockquote>\\n<p><a href=\\\"https://www.linux.com/news/event/nodejs/2017/3/slaying-monoliths-netflix-nodejs\\\">We want to slay the monolith.</a> </p>\\n</blockquote>\\n<p>It's time to end the era of a large application hosted on a single server. We've been slowly weaned off the monolith by cloud-based services such as CDN, but there's no reason our application can't be created in a modular nature to operate independently.</p>\\n<h3>ReactJS</h3>\\n<p>You might be asking your why React?</p>\\n<ul>\\n<li>Many sites are making the switch and seeing the performance and UX benefits.</li>\\n<li>React is now MIT licensed, allowing for greater growth and adoption</li>\\n<li>Even Wordpress is switching to React, from it's <a href=\\\"https://github.com/Automattic/wp-calypso\\\">admin panel</a> to theme creators using it on the frontend with the WP API.</li>\\n</ul>\\n<p>We can argue about <a href=\\\"https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176\\\">Angular vs React vs Vue</a>, but at the end of the day, the discussion is still surrounded around the adoption of Javascript based MVC frameworks. It's clear that React (or any technology we choose) may be an opinionated decision, but the competitive options are all within close enough margins that discounts any fear of refactoring.</p>\\n<p>That's why we have our eyes on React. Not because it's a magic solution to the myriad of technical issues that create slow site speeds. We're looking at React because of how powerful the tiny library is, and the potential to scale.</p>\\n<p>It's why companies like Airbnb and Netflix are using it, and giants like Yelp are migrating their complex codebase to it. React does an amazing job of managing the DOM in combination with state, making websites update minor details lightning fast without ever leaving the page.</p>\\n<h2>What's left?</h2>\\n<p>With <a href=\\\"http://new.kushy.net\\\">New.Kushy</a>, we created a rough test of React's potential. There's still a few key features missing from making full replacing our Wordpress site. User authentication, server side rendering, there's quite a few features we're looking forward to implement.</p>\\n<p>Many of the present limitations on our new tech stack are based on our antiquated hosting platform. We're currently residing on server with pre-baked software that makes our job easier and harder at the same time. Things like Apache have been great for decades, but we're looking to making the switch to platforms like NGINX. </p>\\n<p>Keep your eyes peeled! And let us know what you think <a href=\\\"http://twitter.com/kushyapp\\\">on Twitter!</a></p>\\n<p>Cheers!\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"http://new.kushy.net\\\">The New Kushy</a></li>\\n<li><a href=\\\"https://www.linux.com/news/event/nodejs/2017/3/slaying-monoliths-netflix-nodejs\\\">Slaying the Monolith with Netflix</a></li>\\n<li><a href=\\\"https://medium.freecodecamp.org/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76\\\">Yes, React is taking over front-end development. The question is why.</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Start of the Future\",\"cover_image\":null,\"date\":\"08 December, 2017\",\"tags\":[\"announcements\"],\"section\":\"blog\",\"author\":\"Ryo\"},\"fields\":{\"slug\":\"/blog/2017/the-start-of-the-future/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Kushy was founded with a mission to provide a scalable API for the cannabis industry. So far, our API has been only read-only, with only a few endpoints for our major content areas (shops, products, etc). We haven't actually needed to use the API in any applications, beyond minor showcases of it's GET potential.</p>\\n<p>Now that's all going to change.</p>\\n<p>Over the past few months we've gotten a few feature requests from developers looking to implement the Kushy API into their cannabis apps. And I'm excited to announce that we've met the demand by updating our API from an alpha release to a v1 beta.</p>\\n<p>But enough conceptualizing, let's talk process and progress.</p>\\n<blockquote>\\n<p>Our alpha endpoints were originally labeled 'v3', since it was technically the 3rd version of our alpha. However this was confusing, so we dropped it in favor of v1 to make it simpler for earlier adopters.</p>\\n</blockquote>\\n<p>In a fairly short time, we've been able to isolate our API from our frontend stack, and create microservices and separate applications for our different needs. All of our interfaces now operate independently and interact with the same API, keeping a single source of truth between our suite of apps.</p>\\n<h2>Built from the ground up</h2>\\n<p>Rather than building the API purely abstractly through some OpenAPI/Swagger docs, we opted to take a more practical approach to the API development. Using the our own API to build applications for internal and client-side use, we've been able to pinpoint any issues that developers may encounter while integrating.</p>\\n<p>Though we did seek a more practical route, it does not mean we didn't plan our approach. The first step was planning out the entire API. Every endpoint had to be listed to ensure we had a place to query every type of data. Relationships were the trickiest part, it was tempting to create relational endpoints on each parent endpoint (e.g. <code class=\\\"language-text\\\">/api/v1/shops/photos/</code>). However by listing these out, it became clear root endpoints for the relationships would be more efficient (e.g. <code class=\\\"language-text\\\">/api/v1/photos/menu/:shopSlug/</code>), rather than duplicating it on a bunch of controllers.</p>\\n<h3>App first approach</h3>\\n<p>We used our NextJS frontend and an admin backend as platforms to build out all the missing endpoints and methods (POST, PUT, DELETE). For the most part, It was a fairly simple endeavor of taking our existing functions and migrating them to API controllers. </p>\\n<p>We were able to format our JSON responses Laravel's <a href=\\\"https://laravel.com/docs/5.6/eloquent-resources\\\">API Resources</a>, which allow fine-tuned control of what object properties display (beyond the Model's hidden or protected properties, and any scoped properties). It added the last layer of polish to the API ensuring that our responses weren't inherently tied to our Models/table columns, allowing for more flexibility down the line if we needed to modify any Models (and possibly rename important columns like \\\"featured_img\\\").</p>\\n<h3>Develop ðŸ‘‰ Documentation</h3>\\n<p>Each round of API development was immediately followed with documentation. To facilitate this, I created a GatsbyJS project based on <a href=\\\"https://github.com/lord/slate\\\">Slate</a> that takes a folder full of Markdown files and generates fast and accessible docs. To add endpoints to the API, you simply create a new folder (if one doesn't exist for the endpoint/section), and add a Markdown file with the following headers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\ntitle<span class=\\\"token punctuation\\\">:</span> Get inventory <span class=\\\"token keyword\\\">of</span> specific shop<span class=\\\"token operator\\\">/</span>brand\\nroute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/inventory/menu/:slug\\\"</span>\\nmethod<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"get\\\"</span>\\npage_type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"api\\\"</span>\\nlast_updated<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2018-07-13\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n\\nCode snippets first\\n\\nThen your page info here\\n</code></pre>\\n      </div>\\n<p>Save your file, run the deploy script, and the docs are up to date! Gatsby displays all your docs organized in the sidebar and uses the method in the Markdown header to label each route/endpoint appropriately. Some neat CSS tricks take the code snippets and align them to the right of your text in a separate dark sidebar (on larger viewports).</p>\\n<p>This simplified workflow expedited the documentation process, allowing us to focus on writing (<em>and often just copy/pasting</em>).</p>\\n<h2>New features</h2>\\n<p>I mentioned we only had base endpoints with only the GET methods. Now the API has been expanded from 4 endpoints to over 20! Here are just a few of the endpoints we added:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">/inventory/</code> - Allows you to access the inventory system, whether it's all tracked products, or an individuals shop or brand's menu (<code class=\\\"language-text\\\">/inventory/menu/the-shop-slug-here</code>).</li>\\n<li><code class=\\\"language-text\\\">/photos/</code> - Displays all photos in database, usually attached to posts (like shops, products, etc).</li>\\n<li><code class=\\\"language-text\\\">/states/</code> - Shows a list of 50 states and popular cities for location-based archives.</li>\\n</ul>\\n<h2>So what are the benefits?</h2>\\n<p>As with any software development, mountains of code don't get moved without good reason. We chose to migrate our API to it's own separate home for a few good reasons.</p>\\n<h3>Scalability</h3>\\n<p>Having the API in it's own home makes tasks like clustering, or even splintering into microservices, much easier. Before it would have been impossible without excising the API completely (like we are now).</p>\\n<h3>Maintainability</h3>\\n<p>The more code, the more confusing. Especially when you're dealing with different realms (server and client side) and have different goals for each. Keeping our frontend and backend code separate ensures that primarily - if we break one, the other doesn't break. It's also easier to hand the codebase to a developer and have them grasp it, as opposed to deciphering the difference between the frontend and backend themselves.</p>\\n<h3>Efficiency</h3>\\n<p>By running it as a separate instance from the frontend, we can run the API on a whole different server than our frontend. That improves the load immensely already. And like I mentioned before, we can begin to optimize the API for load balancing.</p>\\n<h2>The future of Kushy apps</h2>\\n<p>Now that we've transitioned to an API-centric architecture, we can start to create applications that leverage it's power. The first app we whipped up was a frontend for Kushy, essentially mirroring the functionality we'd already created with Laravel. The main goal was to create a modern progressive web app, preferably running on ReactJS. </p>\\n<p>We settled on NextJS as a framework to solve a lot of the issues we had with frontend React development:</p>\\n<ul>\\n<li>Single page applications, or SPAs, are notorious for being less SEO friendly. NextJS enables server-side rendering of React, so pages can be hydrated with data before the user renders the page. This ensures important content is always loaded, even if Javascript is disabled client-side.</li>\\n<li>React stacks are known for being full of complex configurations with utilities like Webpack. NextJS comes with preset configs out of the box that handle tasks like code splitting routes.</li>\\n<li>It's easy to use! The most important thing about a framework is how frictionless the experience is, and NextJS rightfully advertises itself as a minimalistic solution.</li>\\n</ul>\\n<p>We'll probably be using NextJS with a few other applications in the future, like our wholesale marketplace, until we discover a more suitable replacement for SSR.</p>\\n<h2>How can I get started with the Kushy API?</h2>\\n<p>If these kind of updates sound intriguing and you want to check out what kind of work we're doing here, you can <a href=\\\"http://kushy.net/developers\\\">sign up and create API credentials here</a> and then follow our <a href=\\\"https://kushy.net/developers/getting-started\\\">getting started guide</a> to see how to authenticate your app using the OAuth 2.0 flow.</p>\\n<p>I can't wait to see the full potential of the Kushy API realized, and a widespread adoption of it. I hope we can standardize this process for the cannabis industry, and provide a proven solution for everyday processes like patient verification or inventory management.</p>\\n<p>Cheers,\\nOscar</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"http://kushy.net/developers/\\\">Kushy API</a></li>\\n<li><a href=\\\"http://kushy.net/developers/apps/\\\">Kushy API - Create API credentials</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Future of the Kushy API\",\"cover_image\":null,\"date\":\"23 July, 2018\",\"tags\":[\"api\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/the-future-of-the-kushy-api/\"}}},{\"node\":{\"html\":\"<p>Keeping track of legal cannabis is one hell of a job. That's why many states that legalize medicinal and recreational cannabis license a 3rd party seed to sale tracking solution to handle the sticky task. These solutions provide businesses a place to input their activity (plant growth, transfers, sales) so the state can monitor and ensure compliance with all regulations and restrictions. <a href=\\\"http://metrc.com\\\"><strong>METRC</strong></a> is one of these seed to sale tracking solutions currently licensed by 13 states. <a href=\\\"http://kushy.net\\\">Kushy</a> is certified with METRC to access their API, so that we can update seed to sale information on behalf of businesses. </p>\\n<p>In order to make accessing the API easier for our developer, we put together an SDK for PHP programmers looking to quickly query METRC API endpoints. Our goal was to create a simple to use interface for the METRC API, without requiring the user manually input endpoints and whatnot. The result is a simple to use API for an API:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>The Construction</h2>\\n<p>The SDK is a simple class that uses the Guzzle library to create HTTP requests on behalf of the user. Each endpoint 'route' is a separate class that extends the base Guzzle class.</p>\\n<h2>How to use it</h2>\\n<ol>\\n<li>Install the METRC package with Composer: <code class=\\\"language-text\\\">composer require &#39;kushy/metrc-php-sdk&#39;</code></li>\\n<li>Require whichever route class you need in your application - in this case we want to access the <code class=\\\"language-text\\\">/harvests/</code> endpoint (<em>assuming you're using PSR-4</em>):</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Create a new instance of the route class (<code class=\\\"language-text\\\">Harvests</code>) and pass through your state's abbreviated name (in this case <code class=\\\"language-text\\\">ca</code> for California) and Vendor + User API keys:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Use one of the class methods to query the API - this example grabs the active harvests:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>You can find the package on <a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">Packagist here</a>, as well as a README with more details (instructions, tips and tricks, etc).</p>\\n</blockquote>\\n<h2>Making cannabis (development) simpler</h2>\\n<p>Here at Kushy we're always innovating and contributing back to the cannabis community to ensure that life gets easier for everyone in the cannabis chain of command -- from consumers to businesses to developers. If we can make it easier to integrate with METRC, it increases the potential for more excellent apps that keep businesses compliant and safe from losing their license.</p>\\n<p>If you're interested in contributing and improving the SDK, <a href=\\\"https://github.com/kushyapp/kushy-metrc-php-sdk\\\">fork us over on Github and send a PR our way!</a></p>\\n<p>Stay kushy,\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">kushy/metrc-php-sdk</a></li>\\n<li><a href=\\\"http://metrc.com\\\">METRC</a></li>\\n<li><a href=\\\"https://api-ca.metrc.com/Documentation/\\\">METRC API Docs for California</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy METRC PHP SDK\",\"cover_image\":{\"publicURL\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg\",\"srcSet\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-7cc04.jpg 310w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-69042.jpg 620w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg 1240w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-50ab1.jpg 1860w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-de007.jpg 2000w\"}}},\"date\":\"19 July, 2018\",\"tags\":[\"tools\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}}}]}},\"pathContext\":{\"tag\":\"announcements\",\"slug\":\"/blog/2017/the-start-of-the-future/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2017-the-start-of-the-future-ffb389ab5c54dd797db1.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>We're big fans of fast, responsive apps. There's nothing more discouraging than slugging around a website, waiting for each page to chug into place. Things should be reactive to our actions, and feel fairly seamless. The opposite of clunky.</p>\\n<p>Here at Kushy, we've done our best to develop a website full of all the features we need. The one thing we've struggled with, is the <strong>user experience</strong>. As good as our design is, we're inherently limited by our framework, which makes the site slower than we'd prefer. </p>\\n<p>Now we're hoping to shed our relationship with Wordpress and migrate our tech stack to a more efficient architecture.</p>\\n<h2>Introducing new.kushy.net</h2>\\n<p>This will be the home of our new developments with technology like React, Node, etc ðŸ‘‰ <a href=\\\"http://new.kushy.net\\\">new.kushy.net</a> ðŸ‘ˆ Test away! Let us know what you think about the look, feel, and functionality.</p>\\n<h3>The New Tech Stack</h3>\\n<p>The plan is to run a NodeJS/Express based API, which transmits our cannabis data to anyone. We'll have a React app on another NodeJS server that server side renders our app to ensure best SEO practices and improve UX. Businesses will have their own dashboard to connect to the API and manage their shops, inventory, etc -- this'll be created with PHP7 and jQuery for the highest level of compatibility and better safety than using heavy client-side scripts.</p>\\n<blockquote>\\n<p>Business Dashboard &#x3C;-- (Node API) -> React</p>\\n</blockquote>\\n<h2>Wordpress is slow</h2>\\n<p>We're currently running Wordpress as our CMS, with a couple handfuls of plugins to transform Wordpress into a different beast. It can scale, but requires lots of tweaking and extra paid services (CDNs, cloud distribution, etc). And it <em>works</em>, but requires custom written plugins. Which is almost <em>insulting</em>, when the community touts the expansiveness of the plugin ecosystem, and most plugins are so poorly written they bog down your site (<em>or create immense security risks</em>).</p>\\n<p>Rather than rewriting the plugins, and dropping cash on CDNs, we opted to spend the development time engineering a new, custom codebase.</p>\\n<h2>Don't You Have An API?</h2>\\n<p>We first used the Wordpress API as the primary cannabis API. Then we migrated to the Directus API, which made the process faster and easier. Now we've hit the wall with the current API, where we're requiring really custom endpoints that do specialized queries (lat/lng region mapping, complex JOINs, lots of good stuff). </p>\\n<p>We could edit the Directus API to accomplish our goal, but we weren't a fan of codebase. And after minimal testing using Node and Express, it became clear it'd be faster to write it from scratch -- our way.</p>\\n<h2>Time to create the future</h2>\\n<p>The future contains a lot of JavaScript.</p>\\n<h3>NodeJS</h3>\\n<p>We use Node for our server because of how lightweight and fast it is. It's also incredibly easy to cluster Node server, as well as break up Node apps into microservices to spread across the cloud. </p>\\n<blockquote>\\n<p><a href=\\\"https://www.linux.com/news/event/nodejs/2017/3/slaying-monoliths-netflix-nodejs\\\">We want to slay the monolith.</a> </p>\\n</blockquote>\\n<p>It's time to end the era of a large application hosted on a single server. We've been slowly weaned off the monolith by cloud-based services such as CDN, but there's no reason our application can't be created in a modular nature to operate independently.</p>\\n<h3>ReactJS</h3>\\n<p>You might be asking your why React?</p>\\n<ul>\\n<li>Many sites are making the switch and seeing the performance and UX benefits.</li>\\n<li>React is now MIT licensed, allowing for greater growth and adoption</li>\\n<li>Even Wordpress is switching to React, from it's <a href=\\\"https://github.com/Automattic/wp-calypso\\\">admin panel</a> to theme creators using it on the frontend with the WP API.</li>\\n</ul>\\n<p>We can argue about <a href=\\\"https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176\\\">Angular vs React vs Vue</a>, but at the end of the day, the discussion is still surrounded around the adoption of Javascript based MVC frameworks. It's clear that React (or any technology we choose) may be an opinionated decision, but the competitive options are all within close enough margins that discounts any fear of refactoring.</p>\\n<p>That's why we have our eyes on React. Not because it's a magic solution to the myriad of technical issues that create slow site speeds. We're looking at React because of how powerful the tiny library is, and the potential to scale.</p>\\n<p>It's why companies like Airbnb and Netflix are using it, and giants like Yelp are migrating their complex codebase to it. React does an amazing job of managing the DOM in combination with state, making websites update minor details lightning fast without ever leaving the page.</p>\\n<h2>What's left?</h2>\\n<p>With <a href=\\\"http://new.kushy.net\\\">New.Kushy</a>, we created a rough test of React's potential. There's still a few key features missing from making full replacing our Wordpress site. User authentication, server side rendering, there's quite a few features we're looking forward to implement.</p>\\n<p>Many of the present limitations on our new tech stack are based on our antiquated hosting platform. We're currently residing on server with pre-baked software that makes our job easier and harder at the same time. Things like Apache have been great for decades, but we're looking to making the switch to platforms like NGINX. </p>\\n<p>Keep your eyes peeled! And let us know what you think <a href=\\\"http://twitter.com/kushyapp\\\">on Twitter!</a></p>\\n<p>Cheers!\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"http://new.kushy.net\\\">The New Kushy</a></li>\\n<li><a href=\\\"https://www.linux.com/news/event/nodejs/2017/3/slaying-monoliths-netflix-nodejs\\\">Slaying the Monolith with Netflix</a></li>\\n<li><a href=\\\"https://medium.freecodecamp.org/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76\\\">Yes, React is taking over front-end development. The question is why.</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Start of the Future\",\"cover_image\":null,\"date\":\"08 December, 2017\",\"tags\":[\"announcements\"],\"section\":\"blog\",\"author\":\"Ryo\"},\"fields\":{\"slug\":\"/blog/2017/the-start-of-the-future/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Kushy was founded with a mission to provide a scalable API for the cannabis industry. So far, our API has been only read-only, with only a few endpoints for our major content areas (shops, products, etc). We haven't actually needed to use the API in any applications, beyond minor showcases of it's GET potential.</p>\\n<p>Now that's all going to change.</p>\\n<p>Over the past few months we've gotten a few feature requests from developers looking to implement the Kushy API into their cannabis apps. And I'm excited to announce that we've met the demand by updating our API from an alpha release to a v1 beta.</p>\\n<p>But enough conceptualizing, let's talk process and progress.</p>\\n<blockquote>\\n<p>Our alpha endpoints were originally labeled 'v3', since it was technically the 3rd version of our alpha. However this was confusing, so we dropped it in favor of v1 to make it simpler for earlier adopters.</p>\\n</blockquote>\\n<p>In a fairly short time, we've been able to isolate our API from our frontend stack, and create microservices and separate applications for our different needs. All of our interfaces now operate independently and interact with the same API, keeping a single source of truth between our suite of apps.</p>\\n<h2>Built from the ground up</h2>\\n<p>Rather than building the API purely abstractly through some OpenAPI/Swagger docs, we opted to take a more practical approach to the API development. Using the our own API to build applications for internal and client-side use, we've been able to pinpoint any issues that developers may encounter while integrating.</p>\\n<p>Though we did seek a more practical route, it does not mean we didn't plan our approach. The first step was planning out the entire API. Every endpoint had to be listed to ensure we had a place to query every type of data. Relationships were the trickiest part, it was tempting to create relational endpoints on each parent endpoint (e.g. <code class=\\\"language-text\\\">/api/v1/shops/photos/</code>). However by listing these out, it became clear root endpoints for the relationships would be more efficient (e.g. <code class=\\\"language-text\\\">/api/v1/photos/menu/:shopSlug/</code>), rather than duplicating it on a bunch of controllers.</p>\\n<h3>App first approach</h3>\\n<p>We used our NextJS frontend and an admin backend as platforms to build out all the missing endpoints and methods (POST, PUT, DELETE). For the most part, It was a fairly simple endeavor of taking our existing functions and migrating them to API controllers. </p>\\n<p>We were able to format our JSON responses Laravel's <a href=\\\"https://laravel.com/docs/5.6/eloquent-resources\\\">API Resources</a>, which allow fine-tuned control of what object properties display (beyond the Model's hidden or protected properties, and any scoped properties). It added the last layer of polish to the API ensuring that our responses weren't inherently tied to our Models/table columns, allowing for more flexibility down the line if we needed to modify any Models (and possibly rename important columns like \\\"featured_img\\\").</p>\\n<h3>Develop ðŸ‘‰ Documentation</h3>\\n<p>Each round of API development was immediately followed with documentation. To facilitate this, I created a GatsbyJS project based on <a href=\\\"https://github.com/lord/slate\\\">Slate</a> that takes a folder full of Markdown files and generates fast and accessible docs. To add endpoints to the API, you simply create a new folder (if one doesn't exist for the endpoint/section), and add a Markdown file with the following headers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\ntitle<span class=\\\"token punctuation\\\">:</span> Get inventory <span class=\\\"token keyword\\\">of</span> specific shop<span class=\\\"token operator\\\">/</span>brand\\nroute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/inventory/menu/:slug\\\"</span>\\nmethod<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"get\\\"</span>\\npage_type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"api\\\"</span>\\nlast_updated<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2018-07-13\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n\\nCode snippets first\\n\\nThen your page info here\\n</code></pre>\\n      </div>\\n<p>Save your file, run the deploy script, and the docs are up to date! Gatsby displays all your docs organized in the sidebar and uses the method in the Markdown header to label each route/endpoint appropriately. Some neat CSS tricks take the code snippets and align them to the right of your text in a separate dark sidebar (on larger viewports).</p>\\n<p>This simplified workflow expedited the documentation process, allowing us to focus on writing (<em>and often just copy/pasting</em>).</p>\\n<h2>New features</h2>\\n<p>I mentioned we only had base endpoints with only the GET methods. Now the API has been expanded from 4 endpoints to over 20! Here are just a few of the endpoints we added:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">/inventory/</code> - Allows you to access the inventory system, whether it's all tracked products, or an individuals shop or brand's menu (<code class=\\\"language-text\\\">/inventory/menu/the-shop-slug-here</code>).</li>\\n<li><code class=\\\"language-text\\\">/photos/</code> - Displays all photos in database, usually attached to posts (like shops, products, etc).</li>\\n<li><code class=\\\"language-text\\\">/states/</code> - Shows a list of 50 states and popular cities for location-based archives.</li>\\n</ul>\\n<h2>So what are the benefits?</h2>\\n<p>As with any software development, mountains of code don't get moved without good reason. We chose to migrate our API to it's own separate home for a few good reasons.</p>\\n<h3>Scalability</h3>\\n<p>Having the API in it's own home makes tasks like clustering, or even splintering into microservices, much easier. Before it would have been impossible without excising the API completely (like we are now).</p>\\n<h3>Maintainability</h3>\\n<p>The more code, the more confusing. Especially when you're dealing with different realms (server and client side) and have different goals for each. Keeping our frontend and backend code separate ensures that primarily - if we break one, the other doesn't break. It's also easier to hand the codebase to a developer and have them grasp it, as opposed to deciphering the difference between the frontend and backend themselves.</p>\\n<h3>Efficiency</h3>\\n<p>By running it as a separate instance from the frontend, we can run the API on a whole different server than our frontend. That improves the load immensely already. And like I mentioned before, we can begin to optimize the API for load balancing.</p>\\n<h2>The future of Kushy apps</h2>\\n<p>Now that we've transitioned to an API-centric architecture, we can start to create applications that leverage it's power. The first app we whipped up was a frontend for Kushy, essentially mirroring the functionality we'd already created with Laravel. The main goal was to create a modern progressive web app, preferably running on ReactJS. </p>\\n<p>We settled on NextJS as a framework to solve a lot of the issues we had with frontend React development:</p>\\n<ul>\\n<li>Single page applications, or SPAs, are notorious for being less SEO friendly. NextJS enables server-side rendering of React, so pages can be hydrated with data before the user renders the page. This ensures important content is always loaded, even if Javascript is disabled client-side.</li>\\n<li>React stacks are known for being full of complex configurations with utilities like Webpack. NextJS comes with preset configs out of the box that handle tasks like code splitting routes.</li>\\n<li>It's easy to use! The most important thing about a framework is how frictionless the experience is, and NextJS rightfully advertises itself as a minimalistic solution.</li>\\n</ul>\\n<p>We'll probably be using NextJS with a few other applications in the future, like our wholesale marketplace, until we discover a more suitable replacement for SSR.</p>\\n<h2>How can I get started with the Kushy API?</h2>\\n<p>If these kind of updates sound intriguing and you want to check out what kind of work we're doing here, you can <a href=\\\"http://kushy.net/developers\\\">sign up and create API credentials here</a> and then follow our <a href=\\\"https://kushy.net/developers/getting-started\\\">getting started guide</a> to see how to authenticate your app using the OAuth 2.0 flow.</p>\\n<p>I can't wait to see the full potential of the Kushy API realized, and a widespread adoption of it. I hope we can standardize this process for the cannabis industry, and provide a proven solution for everyday processes like patient verification or inventory management.</p>\\n<p>Cheers,\\nOscar</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"http://kushy.net/developers/\\\">Kushy API</a></li>\\n<li><a href=\\\"http://kushy.net/developers/apps/\\\">Kushy API - Create API credentials</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"The Future of the Kushy API\",\"cover_image\":null,\"date\":\"23 July, 2018\",\"tags\":[\"api\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/the-future-of-the-kushy-api/\"}}},{\"node\":{\"html\":\"<p>Keeping track of legal cannabis is one hell of a job. That's why many states that legalize medicinal and recreational cannabis license a 3rd party seed to sale tracking solution to handle the sticky task. These solutions provide businesses a place to input their activity (plant growth, transfers, sales) so the state can monitor and ensure compliance with all regulations and restrictions. <a href=\\\"http://metrc.com\\\"><strong>METRC</strong></a> is one of these seed to sale tracking solutions currently licensed by 13 states. <a href=\\\"http://kushy.net\\\">Kushy</a> is certified with METRC to access their API, so that we can update seed to sale information on behalf of businesses. </p>\\n<p>In order to make accessing the API easier for our developer, we put together an SDK for PHP programmers looking to quickly query METRC API endpoints. Our goal was to create a simple to use interface for the METRC API, without requiring the user manually input endpoints and whatnot. The result is a simple to use API for an API:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>The Construction</h2>\\n<p>The SDK is a simple class that uses the Guzzle library to create HTTP requests on behalf of the user. Each endpoint 'route' is a separate class that extends the base Guzzle class.</p>\\n<h2>How to use it</h2>\\n<ol>\\n<li>Install the METRC package with Composer: <code class=\\\"language-text\\\">composer require &#39;kushy/metrc-php-sdk&#39;</code></li>\\n<li>Require whichever route class you need in your application - in this case we want to access the <code class=\\\"language-text\\\">/harvests/</code> endpoint (<em>assuming you're using PSR-4</em>):</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">require_once</span> <span class=\\\"token single-quoted-string string\\\">'../../../vendor/autoload.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Kushy<span class=\\\"token punctuation\\\">\\\\</span>Metrc<span class=\\\"token punctuation\\\">\\\\</span>Routes<span class=\\\"token punctuation\\\">\\\\</span>Harvests</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Create a new instance of the route class (<code class=\\\"language-text\\\">Harvests</code>) and pass through your state's abbreviated name (in this case <code class=\\\"language-text\\\">ca</code> for California) and Vendor + User API keys:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Harvests</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'ca'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$vendorApiKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$userApiKey</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Use one of the class methods to query the API - this example grabs the active harvests:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$harvests</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$metrc</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">getActive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$licenseNumber</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$startDate</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$endDate</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>You can find the package on <a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">Packagist here</a>, as well as a README with more details (instructions, tips and tricks, etc).</p>\\n</blockquote>\\n<h2>Making cannabis (development) simpler</h2>\\n<p>Here at Kushy we're always innovating and contributing back to the cannabis community to ensure that life gets easier for everyone in the cannabis chain of command -- from consumers to businesses to developers. If we can make it easier to integrate with METRC, it increases the potential for more excellent apps that keep businesses compliant and safe from losing their license.</p>\\n<p>If you're interested in contributing and improving the SDK, <a href=\\\"https://github.com/kushyapp/kushy-metrc-php-sdk\\\">fork us over on Github and send a PR our way!</a></p>\\n<p>Stay kushy,\\nOscar</p>\\n<hr>\\n<p><strong>Keep Reading</strong></p>\\n<ul>\\n<li><a href=\\\"https://packagist.org/packages/kushy/metrc-php-sdk\\\">kushy/metrc-php-sdk</a></li>\\n<li><a href=\\\"http://metrc.com\\\">METRC</a></li>\\n<li><a href=\\\"https://api-ca.metrc.com/Documentation/\\\">METRC API Docs for California</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Kushy METRC PHP SDK\",\"cover_image\":{\"publicURL\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg\",\"srcSet\":\"/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-7cc04.jpg 310w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-69042.jpg 620w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-4e8db.jpg 1240w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-50ab1.jpg 1860w,\\n/static/KBlog-Metrc-PHP-SDK-b31137b3a03d0046e257a21741934611-de007.jpg 2000w\"}}},\"date\":\"19 July, 2018\",\"tags\":[\"tools\",\"announcements\",\"developers\"]},\"fields\":{\"slug\":\"/blog/2018/introducing-kushy-metrc-php-sdk/\"}}}]}},\"pathContext\":{\"tag\":\"announcements\",\"slug\":\"/blog/2017/the-start-of-the-future/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2017-the-start-of-the-future.json\n// module id = 392\n// module chunks = 84343905927806"],"sourceRoot":""}