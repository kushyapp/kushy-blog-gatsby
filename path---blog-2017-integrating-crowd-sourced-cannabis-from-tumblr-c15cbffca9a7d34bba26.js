webpackJsonp([0xcd6ad1722810],{390:function(n,s){n.exports={data:{blog:{html:'<p>How do you get pictures of over 9,000 cannabis strains? You could start a very long and expensive journey of buying and documenting thousands of products. Or you can get the community pitch in their pot (pics).</p>\n<p>When it came time to fill up the Kushy database with a myriad of dank images, we looked to WeedPornDaily, an online cannabis publication and community. Users of WPD can <a href="http://weedporndaily.com/contribute">submit photos to the website</a> through a Tumblr submission form, or are curated by the staff from known stoney sources. With over 7 years of pot photos stockpiled and <a href="http://weedporndaily.tumblr.com/tagged/blue-dream">organized neatly by tag</a>, we were able to effortlessly search through the archive and fill our database.</p>\n<h2>The Code</h2>\n<p>This was a pretty simple task. We take our database of over 9,000 cannabis strains and run it against the public Tumblr XML. Each strain name would be <a href="http://weedporndaily.tumblr.com/tagged/blue-dream/xml">checked as a Tumblr tag</a>, and if we got photos, we\'d input it into an image database. The images would be associated with an <code class="language-text">item_id</code> and <code class="language-text">item_type</code>, where <strong>type</strong> would be <em>strains</em> and <strong>ID</strong> would be the <em>Strain ID</em>. And we\'d store the image caption, would contains additional credit for the image source.</p>\n<p>With PHP, this is accomplished fairly crudely using a combination of cURL and non-PDO SQL interactions:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">//mySQL</span>\n<span class="token comment">// connect to mysql</span>\n<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span>\n<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"user"</span><span class="token punctuation">;</span>\n<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"super_secret"</span><span class="token punctuation">;</span>\n<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"kushy_api"</span><span class="token punctuation">;</span>\n<span class="token comment">// Create connection</span>\n<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Check connection</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Connection failed: "</span> <span class="token punctuation">.</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token variable">$timeout</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\t<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_CONNECTTIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_USERAGENT</span><span class="token punctuation">,</span><span class="token single-quoted-string string">\'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Select all strains</span>\n<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * from strains"</span><span class="token punctuation">;</span>\n<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Open log file</span>\n<span class="token variable">$my_file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">\'error-strains.txt\'</span><span class="token punctuation">;</span>\n<span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$my_file</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'w\'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'Cannot open file:  \'</span><span class="token punctuation">.</span><span class="token variable">$my_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// If we got some strains</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// loop through each sql result row</span>\n\t<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t     <span class="token comment">// reset error handling</span>\n        <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token variable">$strain_id</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'id\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'name\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// pull API</span>\n        <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"http://weedporndaily.tumblr.com/tagged/<span class="token interpolation"><span class="token variable">$name</span></span>/xml"</span><span class="token punctuation">;</span>\n        <span class="token keyword">echo</span> <span class="token variable">$url</span><span class="token punctuation">;</span>\n        <span class="token variable">$json_new</span> <span class="token operator">=</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">// checks if Tumblr spit back a 400 Bad Request, or a real XML object</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleXmlElement</span><span class="token punctuation">(</span><span class="token variable">$json_new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Do something with the exception, or ignore it.</span>\n            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token comment">// log strains that don\'t have images</span>\n            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"\\n"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>\n            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token comment">// if no error</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$error</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// make sure we have a post</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">posts</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">post</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// loop through each post</span>\n            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">posts</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">post</span> <span class="token keyword">as</span> <span class="token variable">$entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// only proceed if we actually have a photo URL</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$entry</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token single-quoted-string string">\'photo-url\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token variable">$entry</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token single-quoted-string string">\'photo-url\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token variable">$caption</span> <span class="token operator">=</span>  <span class="token variable">$entry</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token single-quoted-string string">\'photo-caption\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;li>&lt;a href=\'<span class="token interpolation"><span class="token variable">$photo</span></span>\'>&lt;img src=\'<span class="token interpolation"><span class="token variable">$photo</span></span>\' width=\'100\' />&lt;/a>&lt;/li>"</span><span class="token punctuation">;</span>\n                        <span class="token comment">// Insert into DB</span>\n                    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO images ( item_id, item_type, image_url, caption )\n                    VALUES (\'<span class="token interpolation"><span class="token variable">$strain_id</span></span>\', \'strains\', \'<span class="token interpolation"><span class="token variable">$photo</span></span>\', \'<span class="token interpolation"><span class="token variable">$caption</span></span>\')"</span><span class="token punctuation">;</span>\n                    <span class="token comment">//check for errors - print in JS console</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token delimiter important">?></span>\n                        <span class="token operator">&lt;</span>script<span class="token operator">></span>\n                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'Success\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n                        <span class="token delimiter important">&lt;?php</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        <span class="token delimiter important">?></span>\n                        <span class="token operator">&lt;</span>script<span class="token operator">></span>\n                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>`Error <span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n                        <span class="token delimiter important">&lt;?php</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>We also create a log (<code class="language-text">error-strains.txt</code>) of every strain that isn\'t represented on Tumblr, so we can double check and have a better understanding of where the holes are in the data.</p>\n<h2>The Result</h2>\n<p>After about 30 minutes of processing, we pulled over 3,000 photos for our 9,000+ strains. </p>\n<p>And that\'s only pulling the <em>first page</em> of images for each strain that was picked up. Many strains have hundreds of pages of images, like <a href="http://weedporndaily.tumblr.com/tagged/og-kush">O.G. Kush</a>, which would give us easily over 10k images alone. We\'ll save that scrape for another day.</p>\n<p>Thank you again to WeedPornDaily and it\'s community for providing the immense wealth of well sorted cannabis for us to parse and import into the <a href="http://api.kushy.net">Kushy API</a></p>\n<p>Oscar</p>\n<hr>\n<p><strong>Keep Reading:</strong></p>\n<ul>\n<li><a href="http://weedporndaily.com">WeedPornDaily</a></li>\n<li><a href="https://www.tumblr.com/docs/en/api/v1">Tumblr API v1</a></li>\n<li><a href="http://github.com/kushyapp">Kushy Github</a></li>\n</ul>',frontmatter:{title:"Integrating Crowd Sourced Cannabis from Tumblr",cover_image:null,date:"10 December, 2017",tags:["spotlight","developers"],section:"blog",author:"Ryo"},fields:{slug:"/blog/2017/integrating-crowd-sourced-cannabis-from-tumblr/"}},relatedPosts:null},pathContext:{tag:"spotlight",slug:"/blog/2017/integrating-crowd-sourced-cannabis-from-tumblr/"}}}});
//# sourceMappingURL=path---blog-2017-integrating-crowd-sourced-cannabis-from-tumblr-c15cbffca9a7d34bba26.js.map